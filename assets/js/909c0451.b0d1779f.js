"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[43366],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>g});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(g,l(l({ref:n},p),{},{components:t})):r.createElement(g,l({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},52685:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(58168),a=(t(96540),t(15680));const o={title:"Install Spawn",sidebar_label:"Install Spawn",sidebar_position:2,slug:"/install/install-spawn"},l="Overview",i={unversionedId:"setup/install-spawn",id:"version-v0.50.x/setup/install-spawn",title:"Install Spawn",description:"Install the Spawn CLI tool to your local machine",source:"@site/onboarding_versioned_docs/version-v0.50.x/01-setup/02-install-spawn.md",sourceDirName:"01-setup",slug:"/install/install-spawn",permalink:"/dev-portal-docsite/onboarding/install/install-spawn",draft:!1,tags:[],version:"v0.50.x",sidebarPosition:2,frontMatter:{title:"Install Spawn",sidebar_label:"Install Spawn",sidebar_position:2,slug:"/install/install-spawn"},sidebar:"defaultSidebar",previous:{title:"System Setup",permalink:"/dev-portal-docsite/onboarding/install/system-setup"},next:{title:"Debugging",permalink:"/dev-portal-docsite/onboarding/install/debugging"}},s={},c=[{value:"Install Spawn",id:"install-spawn",level:2},{value:"Command not found error",id:"command-not-found-error",level:2}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"overview"},"Overview"),(0,a.yg)("admonition",{title:"Synopsis",type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Install the Spawn CLI tool to your local machine")),(0,a.yg)("h2",{id:"install-spawn"},"Install Spawn"),(0,a.yg)("p",null,"Install Spawn from source."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"# Install from latest source\ngit clone https://github.com/rollchains/spawn.git --depth 1 --branch v0.50.11\n\n# Change to this directory\ncd spawn\n\n# Clear Go modules cache for a fresh install\ngo clean -modcache\n\n# Install Spawn\nmake install\n\n# Install Local Interchain (testnet runner)\nmake get-localic\n\n# Install docker container builder\nmake get-heighliner\n\n# Verify installations were successful\nspawn\n\nlocal-ic\n\nheighliner\n")),(0,a.yg)("h2",{id:"command-not-found-error"},"Command not found error"),(0,a.yg)("p",null,"If you get \"command 'spawn' not found\", run:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'# Gets your operating system\nunameOut="$(uname -s)"\ncase "${unameOut}" in\n    Linux*)     machine=Linux;;\n    Darwin*)    machine=Mac;;\n    CYGWIN*)    machine=Cygwin;;\n    MINGW*)     machine=MinGw;;\n    MSYS_NT*)   machine=MSys;;\n    *)          machine="UNKNOWN:${unameOut}"\nesac\necho "Your operating system is: $machine"\necho -e "\\nAdding the go binary location to your PATH for global access.\\n\\tIt will now prompt you for your password."\n\n# Adds the location of the binaries to your PATH for global execution.\ncmd=\'export PATH=$PATH:$(go env GOPATH)/bin\'\nif [ $machine == "Linux" ]; then\n    sudo echo "$cmd" >> ~/.bashrc && source ~/.bashrc\nelif [ $machine == "Mac" ]; then\n    sudo echo "$cmd" >> ~/.zshrc && source ~/.zshrc\nelse\n    echo \'Please add the following to your PATH: $(go env GOPATH)/bin\'\nfi\n')))}d.isMDXComponent=!0}}]);