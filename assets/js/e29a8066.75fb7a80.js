"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[41112],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},19077:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(58168),a=(n(96540),n(15680));const o={},i="CheckTx",c={unversionedId:"build/abci/checktx",id:"version-0.52/build/abci/checktx",title:"CheckTx",description:"CheckTx is called by the BaseApp when comet receives a transaction from a client, over the p2p network or RPC. The CheckTx method is responsible for validating the transaction and returning an error if the transaction is invalid.",source:"@site/cosmos-sdk_versioned_docs/version-0.52/build/abci/04-checktx.md",sourceDirName:"build/abci",slug:"/build/abci/checktx",permalink:"/dev-portal-docsite/cosmos-sdk/build/abci/checktx",draft:!1,tags:[],version:"0.52",sidebarPosition:4,frontMatter:{},sidebar:"buildSidebar",previous:{title:"Vote Extensions",permalink:"/dev-portal-docsite/cosmos-sdk/build/abci/vote-extensions"},next:{title:"README",permalink:"/dev-portal-docsite/cosmos-sdk/build/modules/"}},s={},l=[{value:"CheckTx Handler",id:"checktx-handler",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"checktx"},"CheckTx"),(0,a.yg)("p",null,"CheckTx is called by the ",(0,a.yg)("inlineCode",{parentName:"p"},"BaseApp")," when comet receives a transaction from a client, over the p2p network or RPC. The CheckTx method is responsible for validating the transaction and returning an error if the transaction is invalid. "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-mermaid"},"graph TD\n    subgraph SDK[Cosmos SDK]\n        B[Baseapp]\n        A[AnteHandlers]\n        B <--\x3e|Validate TX| A\n    end\n    C[CometBFT] <--\x3e|CheckTx|SDK\n    U((User)) --\x3e|Submit TX| C\n    N[P2P] --\x3e|Receive TX| C\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/31c604762a434c7b676b6a89897ecbd7c4653a23/baseapp/abci.go#L350-L390\n")),(0,a.yg)("h2",{id:"checktx-handler"},"CheckTx Handler"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"CheckTxHandler")," allows users to extend the logic of ",(0,a.yg)("inlineCode",{parentName:"p"},"CheckTx"),". ",(0,a.yg)("inlineCode",{parentName:"p"},"CheckTxHandler")," is called by pasding context and the transaction bytes received through ABCI. It is required that the handler returns deterministic results given the same transaction bytes. "),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"we return the raw decoded transaction here to avoid decoding it twice.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},"type CheckTxHandler func(ctx sdk.Context, tx []byte) (Tx, error)\n")),(0,a.yg)("p",null,"Setting a custom ",(0,a.yg)("inlineCode",{parentName:"p"},"CheckTxHandler")," is optional. It can be done from your app.go file:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},"func NewSimApp(\n    logger log.Logger,\n    db corestore.KVStoreWithBatch,\n    traceStore io.Writer,\n    loadLatest bool,\n    appOpts servertypes.AppOptions,\n    baseAppOptions ...func(*baseapp.BaseApp),\n) *SimApp {\n  ...\n  // Create ChecktxHandler\n  checktxHandler := abci.NewCustomCheckTxHandler(...)\n  app.SetCheckTxHandler(checktxHandler)\n  ...\n}\n")))}u.isMDXComponent=!0}}]);