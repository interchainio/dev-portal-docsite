"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[49902],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),h=s(t),u=a,m=h["".concat(l,".").concat(u)]||h[u]||p[u]||o;return t?r.createElement(m,i(i({ref:n},d),{},{components:t})):r.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[h]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3443:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=t(58168),a=(t(96540),t(15680));const o={title:"Open transfer channel",sidebar_label:"Open transfer channel",sidebar_position:4,slug:"/channel-upgrades/open-channel"},i="Open an ICS 20 transfer channel",c={unversionedId:"tutorials/channel-upgrades/open-transfer-channel",id:"tutorials/channel-upgrades/open-transfer-channel",title:"Open transfer channel",description:"The relayer needs to submit transactions on both blockchains, so we run the following command to add the keys for the accounts on chain1 and chain2 that the relayer can use to submit transactions:",source:"@site/ibc-go/tutorials/02-channel-upgrades/04-open-transfer-channel.md",sourceDirName:"tutorials/02-channel-upgrades",slug:"/channel-upgrades/open-channel",permalink:"/dev-portal-docsite/ibc-go/next/channel-upgrades/open-channel",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Open transfer channel",sidebar_label:"Open transfer channel",sidebar_position:4,slug:"/channel-upgrades/open-channel"},sidebar:"defaultSidebar",previous:{title:"Run 2 Cosmos SDK Blockchains Locally",permalink:"/dev-portal-docsite/ibc-go/next/channel-upgrades/run-chains"},next:{title:"Upgrade channel",permalink:"/dev-portal-docsite/ibc-go/next/channel-upgrades/upgrade-channel"}},l={},s=[],d={toc:s},h="wrapper";function p(e){let{components:n,...t}=e;return(0,a.yg)(h,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"open-an-ics-20-transfer-channel"},"Open an ICS 20 transfer channel"),(0,a.yg)("p",null,"The relayer needs to submit transactions on both blockchains, so we run the following command to add the keys for the accounts on ",(0,a.yg)("inlineCode",{parentName:"p"},"chain1")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"chain2")," that the relayer can use to submit transactions:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"gm hermes keys\n")),(0,a.yg)("p",null,"The relayer also needs a ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/informalsystems/hermes/blob/master/config.toml"},"configuration file"),". In this tutorial we will have the configuration file in the same folder as the relayer binary and specify it using the ",(0,a.yg)("inlineCode",{parentName:"p"},"--config")," flag in each command."),(0,a.yg)("p",null,"You can generate a default configuration by running:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"gm hermes config\n")),(0,a.yg)("p",null,"This tutorial has been completed with the following configuration file:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"[global]\nlog_level = 'trace'\n\n[telemetry]\nenabled = true\nhost = '127.0.0.1'\nport = 3001\n\n# Specify the mode to be used by the relayer. [Required]\n[mode]\n\n# Specify the client mode.\n[mode.clients]\n\n# Whether or not to enable the client workers. [Required]\nenabled = true\n\n# Whether or not to enable periodic refresh of clients. [Default: true]\n# Note: Even if this is disabled, clients will be refreshed automatically if\n#      there is activity on a connection or channel they are involved with.\nrefresh = true\n\n# Whether or not to enable misbehaviour detection for clients. [Default: false]\nmisbehaviour = true\n\n# Specify the connections mode.\n[mode.connections]\n\n# Whether or not to enable the connection workers for handshake completion. [Required]\nenabled = true\n\n[mode.channels]\nenabled = true\n\n# Specify the packets mode.\n[mode.packets]\n\n# Whether or not to enable the packet workers. [Required]\nenabled = true\n\nclear_interval = 1\n\n[[chains]]\nid = 'chain1'\ntype = 'CosmosSdk'\nrpc_addr = 'http://localhost:27000'\ngrpc_addr = 'http://localhost:27002'\nevent_source = { mode = 'push', url = 'ws://127.0.0.1:27000/websocket', batch_delay = '500ms' }\nrpc_timeout = '15s'\naccount_prefix = 'cosmos'\nkey_name = 'wallet'\nstore_prefix = 'ibc'\ngas_price = { price = 0.001, denom = 'stake' }\nmax_gas = 1000000\nclock_drift = '5s'\ntrusting_period = '14days'\ntrust_threshold = { numerator = '1', denominator = '3' }\n\n[[chains]]\nid = 'chain2'\ntype = 'CosmosSdk'\nrpc_addr = 'http://localhost:27010'\ngrpc_addr = 'http://localhost:27012'\nevent_source = { mode = 'push', url = 'ws://127.0.0.1:27010/websocket', batch_delay = '500ms' }\nrpc_timeout = '15s'\naccount_prefix = 'cosmos'\nkey_name = 'wallet'\nstore_prefix = 'ibc'\ngas_price = { price = 0.001, denom = 'stake' }\nmax_gas = 1000000\nclock_drift = '5s'\ntrusting_period = '14days'\ntrust_threshold = { numerator = '1', denominator = '3' }\n")),(0,a.yg)("p",null,"With both blockchains running, we can run the following command in hermes to establish a connection and an ICS 20 transfer channel:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"hermes --config config.toml create channel --a-chain chain1 \\\n--b-chain chain2 \\\n--a-port transfer \\\n--b-port transfer \\\n--new-client-connection\n")),(0,a.yg)("p",null,"When both the connection and channel handshakes complete, the output on the console looks like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'SUCCESS Channel {\n  ordering: Unordered,\n  a_side: ChannelSide {\n    chain: BaseChainHandle {\n      chain_id: ChainId {\n        id: "chain1",\n        version: 0,\n      },\n      runtime_sender: Sender { .. },\n    },\n    client_id: ClientId(\n      "07-tendermint-0",\n    ),\n    connection_id: ConnectionId(\n      "connection-0",\n    ),\n    port_id: PortId(\n      "transfer",\n    ),\n    channel_id: Some(\n      ChannelId(\n        "channel-0",\n      ),\n    ),\n    version: None,\n  },\n  b_side: ChannelSide {\n    chain: BaseChainHandle {\n      chain_id: ChainId {\n        id: "chain2",\n        version: 0,\n      },\n      runtime_sender: Sender { .. },\n    },\n    client_id: ClientId(\n      "07-tendermint-0",\n    ),\n    connection_id: ConnectionId(\n      "connection-0",\n    ),\n    port_id: PortId(\n      "transfer",\n    ),\n    channel_id: Some(\n      ChannelId(\n        "channel-0",\n      ),\n    ),\n    version: None,\n  },\n  connection_delay: 0ns,\n}\n')))}p.isMDXComponent=!0}}]);