"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[36453],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),g=c(t),u=i,m=g["".concat(l,".").concat(u)]||g[u]||d[u]||s;return t?a.createElement(m,o(o({ref:n},p),{},{components:t})):a.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,o=new Array(s);o[0]=u;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[g]="string"==typeof e?e:i,o[1]=r;for(var c=2;c<s;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},15814:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=t(58168),i=(t(96540),t(15680));const s={},o="ICS 030: Cosmos Signed Messages",r={unversionedId:"build/spec/_ics/ics-030-signed-messages",id:"version-0.50/build/spec/_ics/ics-030-signed-messages",title:"ICS 030: Cosmos Signed Messages",description:"TODO: Replace with valid ICS number and possibly move to new location.",source:"@site/cosmos-sdk_versioned_docs/version-0.50/build/spec/_ics/ics-030-signed-messages.md",sourceDirName:"build/spec/_ics",slug:"/build/spec/_ics/ics-030-signed-messages",permalink:"/dev-portal-docsite/cosmos-sdk/0.50/build/spec/_ics/ics-030-signed-messages",draft:!1,tags:[],version:"0.50",frontMatter:{},sidebar:"buildSidebar",previous:{title:"Cosmos ICS",permalink:"/dev-portal-docsite/cosmos-sdk/0.50/build/spec/_ics/"},next:{title:"Addresses spec",permalink:"/dev-portal-docsite/cosmos-sdk/0.50/build/spec/addresses/"}},l={},c=[{value:"Status",id:"status",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Preliminary",id:"preliminary",level:2},{value:"Specification",id:"specification",level:2},{value:"Future Adaptations",id:"future-adaptations",level:2},{value:"API",id:"api",level:2},{value:"<strong>cosmosSignBytes</strong>",id:"cosmossignbytes",level:3},{value:"Examples",id:"examples",level:3},{value:"References",id:"references",level:2}],p={toc:c},g="wrapper";function d(e){let{components:n,...t}=e;return(0,i.yg)(g,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"ics-030-cosmos-signed-messages"},"ICS 030: Cosmos Signed Messages"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"TODO: Replace with valid ICS number and possibly move to new location.")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#changelog"},"Changelog")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#abstract"},"Abstract")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#preliminary"},"Preliminary")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#specification"},"Specification")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#future-adaptations"},"Future Adaptations")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#api"},"API")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#references"},"References"),"  ")),(0,i.yg)("h2",{id:"status"},"Status"),(0,i.yg)("p",null,"Proposed."),(0,i.yg)("h2",{id:"changelog"},"Changelog"),(0,i.yg)("h2",{id:"abstract"},"Abstract"),(0,i.yg)("p",null,"Having the ability to sign messages off-chain has proven to be a fundamental aspect\nof nearly any blockchain. The notion of signing messages off-chain has many\nadded benefits such as saving on computational costs and reducing transaction\nthroughput and overhead. Within the context of the Cosmos, some of the major\napplications of signing such data includes, but is not limited to, providing a\ncryptographic secure and verifiable means of proving validator identity and\npossibly associating it with some other framework or organization. In addition,\nhaving the ability to sign Cosmos messages with a Ledger or similar HSM device."),(0,i.yg)("p",null,"A standardized protocol for hashing, signing, and verifying messages that can be\nimplemented by the Cosmos SDK and other third-party organizations is needed. Such a\nstandardized protocol subscribes to the following:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Contains a specification of human-readable and machine-verifiable typed structured data"),(0,i.yg)("li",{parentName:"ul"},"Contains a framework for deterministic and injective encoding of structured data"),(0,i.yg)("li",{parentName:"ul"},"Utilizes cryptographic secure hashing and signing algorithms"),(0,i.yg)("li",{parentName:"ul"},"A framework for supporting extensions and domain separation"),(0,i.yg)("li",{parentName:"ul"},"Is invulnerable to chosen ciphertext attacks"),(0,i.yg)("li",{parentName:"ul"},"Has protection against potentially signing transactions a user did not intend to")),(0,i.yg)("p",null,"This specification is only concerned with the rationale and the standardized\nimplementation of Cosmos signed messages. It does ",(0,i.yg)("strong",{parentName:"p"},"not")," concern itself with the\nconcept of replay attacks as that will be left up to the higher-level application\nimplementation. If you view signed messages in the means of authorizing some\naction or data, then such an application would have to either treat this as\nidempotent or have mechanisms in place to reject known signed messages."),(0,i.yg)("h2",{id:"preliminary"},"Preliminary"),(0,i.yg)("p",null,"The Cosmos message signing protocol will be parameterized with a cryptographic\nsecure hashing algorithm ",(0,i.yg)("inlineCode",{parentName:"p"},"SHA-256")," and a signing algorithm ",(0,i.yg)("inlineCode",{parentName:"p"},"S")," that contains\nthe operations ",(0,i.yg)("inlineCode",{parentName:"p"},"sign")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"verify")," which provide a digital signature over a set\nof bytes and verification of a signature respectively."),(0,i.yg)("p",null,"Note, our goal here is not to provide context and reasoning about why necessarily\nthese algorithms were chosen apart from the fact they are the defacto algorithms\nused in CometBFT and the Cosmos SDK and that they satisfy our needs for such\ncryptographic algorithms such as having resistance to collision and second\npre-image attacks, as well as being ",(0,i.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hash_function#Determinism"},"deterministic")," and ",(0,i.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hash_function#Uniformity"},"uniform"),"."),(0,i.yg)("h2",{id:"specification"},"Specification"),(0,i.yg)("p",null,"CometBFT has a well established protocol for signing messages using a canonical\nJSON representation as defined ",(0,i.yg)("a",{parentName:"p",href:"https://https://github.com/cometbft/cometbft/blob/master/types/canonical.go"},"here"),"."),(0,i.yg)("p",null,"An example of such a canonical JSON structure is CometBFT's vote structure:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},'type CanonicalJSONVote struct {\n    ChainID   string               `json:"@chain_id"`\n    Type      string               `json:"@type"`\n    BlockID   CanonicalJSONBlockID `json:"block_id"`\n    Height    int64                `json:"height"`\n    Round     int                  `json:"round"`\n    Timestamp string               `json:"timestamp"`\n    VoteType  byte                 `json:"type"`\n}\n')),(0,i.yg)("p",null,"With such canonical JSON structures, the specification requires that they include\nmeta fields: ",(0,i.yg)("inlineCode",{parentName:"p"},"@chain_id")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"@type"),". These meta fields are reserved and must be\nincluded. They are both of type ",(0,i.yg)("inlineCode",{parentName:"p"},"string"),". In addition, fields must be ordered\nin lexicographically ascending order."),(0,i.yg)("p",null,"For the purposes of signing Cosmos messages, the ",(0,i.yg)("inlineCode",{parentName:"p"},"@chain_id")," field must correspond\nto the Cosmos chain identifier. The user-agent should ",(0,i.yg)("strong",{parentName:"p"},"refuse")," signing if the\n",(0,i.yg)("inlineCode",{parentName:"p"},"@chain_id")," field does not match the currently active chain! The ",(0,i.yg)("inlineCode",{parentName:"p"},"@type")," field\nmust equal the constant ",(0,i.yg)("inlineCode",{parentName:"p"},'"message"'),". The ",(0,i.yg)("inlineCode",{parentName:"p"},"@type")," field corresponds to the type of\nstructure the user will be signing in an application. For now, a user is only\nallowed to sign bytes of valid ASCII text (",(0,i.yg)("a",{parentName:"p",href:"https://https://github.com/cometbft/cometbft/blob/v0.37.0/libs/strings/string.go#L35-L64"},"see here"),").\nHowever, this will change and evolve to support additional application-specific\nstructures that are human-readable and machine-verifiable (",(0,i.yg)("a",{parentName:"p",href:"#futureadaptations"},"see Future Adaptations"),")."),(0,i.yg)("p",null,"Thus, we can have a canonical JSON structure for signing Cosmos messages using\nthe ",(0,i.yg)("a",{parentName:"p",href:"http://json-schema.org/"},"JSON schema")," specification as such:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "http://json-schema.org/draft-04/schema#",\n  "$id": "cosmos/signing/typeData/schema",\n  "title": "The Cosmos signed message typed data schema.",\n  "type": "object",\n  "properties": {\n    "@chain_id": {\n      "type": "string",\n      "description": "The corresponding Cosmos chain identifier.",\n      "minLength": 1\n    },\n    "@type": {\n      "type": "string",\n      "description": "The message type. It must be \'message\'.",\n      "enum": [\n        "message"\n      ]\n    },\n    "text": {\n      "type": "string",\n      "description": "The valid ASCII text to sign.",\n      "pattern": "^[\\\\x20-\\\\x7E]+$",\n      "minLength": 1\n    }\n  },\n  "required": [\n    "@chain_id",\n    "@type",\n    "text"\n  ]\n}\n')),(0,i.yg)("p",null,"e.g."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "@chain_id": "1",\n  "@type": "message",\n  "text": "Hello, you can identify me as XYZ on keybase."\n}\n')),(0,i.yg)("h2",{id:"future-adaptations"},"Future Adaptations"),(0,i.yg)("p",null,"As applications can vary greatly in domain, it will be vital to support both\ndomain separation and human-readable and machine-verifiable structures."),(0,i.yg)("p",null,"Domain separation will allow for application developers to prevent collisions of\notherwise identical structures. It should be designed to be unique per application\nuse and should directly be used in the signature encoding itself."),(0,i.yg)("p",null,"Human-readable and machine-verifiable structures will allow end users to sign\nmore complex structures, apart from just string messages, and still be able to\nknow exactly what they are signing (opposed to signing a bunch of arbitrary bytes)."),(0,i.yg)("p",null,"Thus, in the future, the Cosmos signing message specification will be expected\nto expand upon it's canonical JSON structure to include such functionality."),(0,i.yg)("h2",{id:"api"},"API"),(0,i.yg)("p",null,"Application developers and designers should formalize a standard set of APIs that\nadhere to the following specification:"),(0,i.yg)("hr",null),(0,i.yg)("h3",{id:"cosmossignbytes"},(0,i.yg)("strong",{parentName:"h3"},"cosmosSignBytes")),(0,i.yg)("p",null,"Params:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"data"),": the Cosmos signed message canonical JSON structure"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"address"),": the Bech32 Cosmos account address to sign data with")),(0,i.yg)("p",null,"Returns:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"signature"),": the Cosmos signature derived using signing algorithm ",(0,i.yg)("inlineCode",{parentName:"li"},"S"))),(0,i.yg)("hr",null),(0,i.yg)("h3",{id:"examples"},"Examples"),(0,i.yg)("p",null,"Using the ",(0,i.yg)("inlineCode",{parentName:"p"},"secp256k1")," as the DSA, ",(0,i.yg)("inlineCode",{parentName:"p"},"S"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},'data = {\n  "@chain_id": "1",\n  "@type": "message",\n  "text": "I hereby claim I am ABC on Keybase!"\n}\n\ncosmosSignBytes(data, "cosmos1pvsch6cddahhrn5e8ekw0us50dpnugwnlfngt3")\n> "0x7fc4a495473045022100dec81a9820df0102381cdbf7e8b0f1e2cb64c58e0ecda1324543742e0388e41a02200df37905a6505c1b56a404e23b7473d2c0bc5bcda96771d2dda59df6ed2b98f8"\n')),(0,i.yg)("h2",{id:"references"},"References"))}d.isMDXComponent=!0}}]);