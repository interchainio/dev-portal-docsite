"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[71023],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>u});var o=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),p=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return o.createElement(c.Provider,{value:n},e.children)},l="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(t),m=a,u=l["".concat(c,".").concat(m)]||l[m]||g[m]||r;return t?o.createElement(u,i(i({ref:n},d),{},{components:t})):o.createElement(u,i({ref:n},d))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},718:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=t(58168),a=(t(96540),t(15680));const r={title:"Transaction Encoding",sidebar_label:"Transaction Encoding",sidebar_position:7,slug:"/apps/interchain-accounts/tx-encoding"},i="Transaction Encoding",s={unversionedId:"apps/interchain-accounts/tx-encoding",id:"version-v8.5.x/apps/interchain-accounts/tx-encoding",title:"Transaction Encoding",description:"When orchestrating an interchain account transaction, which comprises multiple sdk.Msg objects represented as Any types, the transactions must be encoded as bytes within InterchainAccountPacketData.",source:"@site/ibc-go_versioned_docs/version-v8.5.x/02-apps/02-interchain-accounts/07-tx-encoding.md",sourceDirName:"02-apps/02-interchain-accounts",slug:"/apps/interchain-accounts/tx-encoding",permalink:"/dev-portal-docsite/ibc-go/apps/interchain-accounts/tx-encoding",draft:!1,tags:[],version:"v8.5.x",sidebarPosition:7,frontMatter:{title:"Transaction Encoding",sidebar_label:"Transaction Encoding",sidebar_position:7,slug:"/apps/interchain-accounts/tx-encoding"},sidebar:"defaultSidebar",previous:{title:"Parameters",permalink:"/dev-portal-docsite/ibc-go/apps/interchain-accounts/parameters"},next:{title:"Client",permalink:"/dev-portal-docsite/ibc-go/apps/interchain-accounts/client"}},c={},p=[{value:"Protobuf Encoding",id:"protobuf-encoding",level:2},{value:"(Protobuf) JSON Encoding",id:"protobuf-json-encoding",level:2}],d={toc:p},l="wrapper";function g(e){let{components:n,...t}=e;return(0,a.yg)(l,(0,o.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"transaction-encoding"},"Transaction Encoding"),(0,a.yg)("p",null,"When orchestrating an interchain account transaction, which comprises multiple ",(0,a.yg)("inlineCode",{parentName:"p"},"sdk.Msg")," objects represented as ",(0,a.yg)("inlineCode",{parentName:"p"},"Any")," types, the transactions must be encoded as bytes within ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v7.2.0/proto/ibc/applications/interchain_accounts/v1/packet.proto#L21-L26"},(0,a.yg)("inlineCode",{parentName:"a"},"InterchainAccountPacketData")),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-protobuf"},"// InterchainAccountPacketData is comprised of a raw transaction, type of transaction and optional memo field.\nmessage InterchainAccountPacketData {\n  Type   type = 1;\n  bytes  data = 2;\n  string memo = 3;\n}\n")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"data")," field must be encoded as a ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v7.2.0/proto/ibc/applications/interchain_accounts/v1/packet.proto#L28-L31"},(0,a.yg)("inlineCode",{parentName:"a"},"CosmosTx")),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-protobuf"},"// CosmosTx contains a list of sdk.Msg's. It should be used when sending transactions to an SDK host chain.\nmessage CosmosTx {\n  repeated google.protobuf.Any messages = 1;\n}\n")),(0,a.yg)("p",null,"The encoding method for ",(0,a.yg)("inlineCode",{parentName:"p"},"CosmosTx")," is determined during the channel handshake process. If the channel version ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v7.2.0/proto/ibc/applications/interchain_accounts/v1/metadata.proto#L22"},"metadata's ",(0,a.yg)("inlineCode",{parentName:"a"},"encoding")," field")," is marked as ",(0,a.yg)("inlineCode",{parentName:"p"},"proto3"),", then ",(0,a.yg)("inlineCode",{parentName:"p"},"CosmosTx")," undergoes protobuf encoding. Conversely, if the field is set to ",(0,a.yg)("inlineCode",{parentName:"p"},"proto3json"),", then ",(0,a.yg)("a",{parentName:"p",href:"https://protobuf.dev/programming-guides/proto3/#json"},"proto3 json")," encoding takes place, which generates a JSON representation of the protobuf message."),(0,a.yg)("h2",{id:"protobuf-encoding"},"Protobuf Encoding"),(0,a.yg)("p",null,"Protobuf encoding serves as the standard encoding process for ",(0,a.yg)("inlineCode",{parentName:"p"},"CosmosTx"),". This occurs if the channel handshake initiates with an empty channel version metadata or if the ",(0,a.yg)("inlineCode",{parentName:"p"},"encoding")," field explicitly denotes ",(0,a.yg)("inlineCode",{parentName:"p"},"proto3"),". In Golang, the protobuf encoding procedure utilizes the ",(0,a.yg)("inlineCode",{parentName:"p"},"proto.Marshal")," function. Every protobuf autogenerated Golang type comes equipped with a ",(0,a.yg)("inlineCode",{parentName:"p"},"Marshal")," method that can be employed to encode the message."),(0,a.yg)("h2",{id:"protobuf-json-encoding"},"(Protobuf) JSON Encoding"),(0,a.yg)("p",null,"The proto3 JSON encoding presents an alternative encoding technique for ",(0,a.yg)("inlineCode",{parentName:"p"},"CosmosTx"),". It is selected if the channel handshake begins with the channel version metadata ",(0,a.yg)("inlineCode",{parentName:"p"},"encoding")," field labeled as ",(0,a.yg)("inlineCode",{parentName:"p"},"proto3json"),". In Golang, the Proto3 canonical encoding in JSON is implemented by the ",(0,a.yg)("inlineCode",{parentName:"p"},'"github.com/cosmos/gogoproto/jsonpb"')," package. Within Cosmos SDK, the ",(0,a.yg)("inlineCode",{parentName:"p"},"ProtoCodec")," structure implements the ",(0,a.yg)("inlineCode",{parentName:"p"},"JSONCodec")," interface, leveraging the ",(0,a.yg)("inlineCode",{parentName:"p"},"jsonpb")," package. This method generates a JSON format as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "messages": [\n    {\n      "@type": "/cosmos.bank.v1beta1.MsgSend",\n      "from_address": "cosmos1...",\n      "to_address": "cosmos1...",\n      "amount": [\n        {\n          "denom": "uatom",\n          "amount": "1000000"\n        }\n      ]\n    }\n  ]\n}\n')),(0,a.yg)("p",null,"Here, the ",(0,a.yg)("inlineCode",{parentName:"p"},'"messages"')," array is populated with transactions. Each transaction is represented as a JSON object with the ",(0,a.yg)("inlineCode",{parentName:"p"},"@type")," field denoting the transaction type and the remaining fields representing the transaction's attributes."))}g.isMDXComponent=!0}}]);