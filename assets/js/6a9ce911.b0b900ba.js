"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[39016],{15680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>d});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=u(t),g=a,d=p["".concat(s,".").concat(g)]||p[g]||c[g]||l;return t?r.createElement(d,o(o({ref:n},m),{},{components:t})):r.createElement(d,o({ref:n},m))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},19517:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=t(58168),a=(t(96540),t(15680));const l={title:"Name Service",sidebar_label:"Bonus",sidebar_position:6,slug:"/build/name-service-bonus"},o="Extra Challenges",i={unversionedId:"build-your-application/extra-challenge",id:"version-v0.50.x/build-your-application/extra-challenge",title:"Name Service",description:"Challenge 1: Limit Input",source:"@site/onboarding_versioned_docs/version-v0.50.x/02-build-your-application/06-extra-challenge.md",sourceDirName:"02-build-your-application",slug:"/build/name-service-bonus",permalink:"/dev-portal-docsite/onboarding/build/name-service-bonus",draft:!1,tags:[],version:"v0.50.x",sidebarPosition:6,frontMatter:{title:"Name Service",sidebar_label:"Bonus",sidebar_position:6,slug:"/build/name-service-bonus"},sidebar:"defaultSidebar",previous:{title:"Testnet",permalink:"/dev-portal-docsite/onboarding/build/name-service-testnet"},next:{title:"Summary",permalink:"/dev-portal-docsite/onboarding/build/name-service-summary"}},s={},u=[{value:"Challenge 1: Limit Input",id:"challenge-1-limit-input",level:2},{value:"Challenge 2: Resolve Wallet From Name",id:"challenge-2-resolve-wallet-from-name",level:2}],m={toc:u},p="wrapper";function c(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"extra-challenges"},"Extra Challenges"),(0,a.yg)("h2",{id:"challenge-1-limit-input"},"Challenge 1: Limit Input"),(0,a.yg)("p",null,"It seems the nameservice will let you set any name length you want. Add a validation check in ",(0,a.yg)("inlineCode",{parentName:"p"},"SetServiceName")," to ensure the name is less than 32 characters long."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Hint #1"),(0,a.yg)("p",null,"The `SetServiceName` in the msg_server.go looks like an interesting place to start. It should return an error if the name is too long.")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Solution"),(0,a.yg)("p",null,"If a user attempts to submit a name longer than 32 characters, it will return an error that is not allowed."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="x/nameservice/keeper/msg_server.go"',title:'"x/nameservice/keeper/msg_server.go"'},'// SetServiceName implements types.MsgServer.\nfunc (ms msgServer) SetServiceName(ctx context.Context, msg *types.MsgSetServiceName) (*types.MsgSetServiceNameResponse, error) {\n    if len(msg.Name) > 32 {\n        return nil, fmt.Errorf("name cannot be longer than 32 characters")\n    }\n\n    if err := ms.k.NameMapping.Set(ctx, msg.Sender, msg.Name); err != nil {\n        return nil, err\n    }\n\n    return &types.MsgSetServiceNameResponse{}, nil\n}\n'))),(0,a.yg)("h2",{id:"challenge-2-resolve-wallet-from-name"},"Challenge 2: Resolve Wallet From Name"),(0,a.yg)("p",null,"Currently the nameservice only allows you to resolve a name given a wallet. If someone has a name they should be able to resolve the wallet address. Add a new query to the ",(0,a.yg)("inlineCode",{parentName:"p"},"query_server")," and autocli client to resolve a wallet address from a name."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"This challenge is signinicantly harder and will some previous Go programming knowledge with iterators. You can also just copy the solutions.")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Hint #1"),(0,a.yg)("p",null,"Create a new query.proto for ResolveWallet that takes in a name string")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Solution #1"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-protobuf",metastring:'title="proto/nameservice/v1/query.proto"',title:'"proto/nameservice/v1/query.proto"'},'// Query provides defines the gRPC querier service.\nservice Query {\n  // Params queries all parameters of the module.\n  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {\n    option (google.api.http).get = "/nameservice/v1/params";\n  }\n\n  // ResolveName allows a user to resolve the name of an account.\n  rpc ResolveName(QueryResolveNameRequest) returns (QueryResolveNameResponse) {\n    option (google.api.http).get = "/nameservice/v1/name/{wallet}";\n  }\n\n  // highlight-start\n  // ResolveWallet allows a user to resolve the wallet of a name.\n  rpc ResolveWallet(QueryResolveWalletRequest) returns (QueryResolveWalletResponse) {\n    option (google.api.http).get = "/nameservice/v1/wallet/{name}";\n  }\n  // highlight-end\n}\n\n// highlight-start\nmessage QueryResolveWalletRequest {\n  string name = 1;\n}\n\nmessage QueryResolveWalletResponse {\n  string wallet = 1;\n}\n// highlight-end\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"make proto-gen\n"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Hint #2"),(0,a.yg)("p",null,"Iterate through the `k.Keeper.NameMapping`, check the Value(). if it matches the name requested, return that wallet (Key)")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Solution #2"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="x/nameservice/keeper/query_server.go"',title:'"x/nameservice/keeper/query_server.go"'},'// ResolveWallet implements types.QueryServer.\nfunc (k Querier) ResolveWallet(goCtx context.Context, req *types.QueryResolveWalletRequest) (*types.QueryResolveWalletResponse, error) {\n    // highlight-start\n    // create a way to iterate over all the name mappings.\n    iter, err := k.Keeper.NameMapping.Iterate(goCtx, nil)\n    if err != nil {\n        return nil, err\n    }\n    defer iter.Close()\n\n    for ; iter.Valid(); iter.Next() {\n        // get the value (name)\n        v, err := iter.Value()\n        if err != nil {\n            return nil, err\n        }\n\n        // if current name matches the requested name,\n        // return the wallet address for the name\n        if v == req.Name {\n            walletAddr, err := iter.Key()\n            if err != nil {\n                return nil, err\n            }\n\n            return &types.QueryResolveWalletResponse{\n                Wallet: walletAddr,\n            }, nil\n        }\n    }\n\n    return nil, fmt.Errorf("wallet not found for name %s", req.Name)\n    // highlight-end\n}\n\n\n')),(0,a.yg)("p",null,"This is not the most efficient way to do this. If you would like, create a new WalletMapping collection that maps name->sender when ",(0,a.yg)("inlineCode",{parentName:"p"},"SetServiceName")," is called. This way you can resolve the wallet from the name in O(1) time (i.e. instant) instead of looping through all possible wallets.")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Hint #3"),(0,a.yg)("p",null,'Add the AutoCLI method to `ResolveWallet` with the `ProtoField` "name" to match the .proto file')),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Solution #3"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="x/nameservice/autocli.go"',title:'"x/nameservice/autocli.go"'},'func (am AppModule) AutoCLIOptions() *autocliv1.ModuleOptions {\n    return &autocliv1.ModuleOptions{\n        Query: &autocliv1.ServiceCommandDescriptor{\n            Service: modulev1.Query_ServiceDesc.ServiceName,\n            RpcCommandOptions: []*autocliv1.RpcCommandOptions{\n                {\n                    RpcMethod: "ResolveName",\n                    Use:       "resolve [wallet]",\n                    Short:     "Resolve the name of a wallet address",\n                    PositionalArgs: []*autocliv1.PositionalArgDescriptor{\n                        {ProtoField: "wallet"},\n                    },\n                },\n                // highlight-start\n                {\n                    RpcMethod: "ResolveWallet",\n                    Use:       "wallet [name]",\n                    Short:     "Resolve the wallet address from a given name",\n                    PositionalArgs: []*autocliv1.PositionalArgDescriptor{\n                        {ProtoField: "name"},\n                    },\n                },\n                // highlight-end\n                {\n                    RpcMethod: "Params",\n                    Use:       "params",\n                    Short:     "Query the current module parameters",\n                },\n            },\n        },\n        ...\n')),(0,a.yg)("p",null,"Then ",(0,a.yg)("inlineCode",{parentName:"p"},"make install")," and re-run the testnet to verify ",(0,a.yg)("inlineCode",{parentName:"p"},"rolld q nameservice wallet <name>")," returns the expected wallet address.")))}c.isMDXComponent=!0}}]);