"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[20224],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>h});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=r,h=d["".concat(s,".").concat(u)]||d[u]||g[u]||i;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},67042:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(58168),r=(t(96540),t(15680));const i={},o="ADR 050: SIGN_MODE_TEXTUAL: Annex 2 XXX",l={unversionedId:"docs/architecture/adr-050-sign-mode-textual-annex2",id:"docs/architecture/adr-050-sign-mode-textual-annex2",title:"ADR 050: SIGN_MODE_TEXTUAL: Annex 2 XXX",description:"Changelog",source:"@site/cosmos-sdk/docs/architecture/adr-050-sign-mode-textual-annex2.md",sourceDirName:"docs/architecture",slug:"/docs/architecture/adr-050-sign-mode-textual-annex2",permalink:"/dev-portal-docsite/cosmos-sdk/next/docs/architecture/adr-050-sign-mode-textual-annex2",draft:!1,tags:[],version:"current",frontMatter:{}},s={},c=[{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2}],p={toc:c},d="wrapper";function g(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"adr-050-sign_mode_textual-annex-2-xxx"},"ADR 050: SIGN_MODE_TEXTUAL: Annex 2 XXX"),(0,r.yg)("h2",{id:"changelog"},"Changelog"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Oct 3, 2022: Initial Draft")),(0,r.yg)("h2",{id:"status"},"Status"),(0,r.yg)("p",null,"DRAFT"),(0,r.yg)("h2",{id:"abstract"},"Abstract"),(0,r.yg)("p",null,"This annex provides normative guidance on how devices should render a\n",(0,r.yg)("inlineCode",{parentName:"p"},"SIGN_MODE_TEXTUAL")," document."),(0,r.yg)("h2",{id:"context"},"Context"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"SIGN_MODE_TEXTUAL")," allows a legible version of a transaction to be signed\non a hardware security device, such as a Ledger. Early versions of the\ndesign rendered transactions directly to lines of ASCII text, but this\nproved awkward from its in-band signaling, and for the need to display\nUnicode text within the transaction."),(0,r.yg)("h2",{id:"decision"},"Decision"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"SIGN_MODE_TEXTUAL")," renders to an abstract representation, leaving it\nup to device-specific software how to present this representation given the\ncapabilities, limitations, and conventions of the device."),(0,r.yg)("p",null,"We offer the following normative guidance:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"The presentation should be as legible as possible to the user, given\nthe capabilities of the device. If legibility could be sacrificed for other\nproperties, we would recommend just using some other signing mode.\nLegibility should focus on the common case - it is okay for unusual cases\nto be less legible.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"The presentation should be invertible if possible without substantial\nsacrifice of legibility.  Any change to the rendered data should result\nin a visible change to the presentation. This extends the integrity of the\nsigning to user-visible presentation.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"The presentation should follow normal conventions of the device,\nwithout sacrificing legibility or invertibility."))),(0,r.yg)("p",null,"As an illustration of these principles, here is an example algorithm\nfor presentation on a device which can display a single 80-character\nline of printable ASCII characters:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The presentation is broken into lines, and each line is presented in\nsequence, with user controls for going forward or backward a line.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Expert mode screens are only presented if the device is in expert mode.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Each line of the screen starts with a number of ",(0,r.yg)("inlineCode",{parentName:"p"},">")," characters equal\nto the screen's indentation level, followed by a ",(0,r.yg)("inlineCode",{parentName:"p"},"+")," character if this\nisn't the first line of the screen, followed by a space if either a\n",(0,r.yg)("inlineCode",{parentName:"p"},">")," or a ",(0,r.yg)("inlineCode",{parentName:"p"},"+")," has been emitted,\nor if this header is followed by a ",(0,r.yg)("inlineCode",{parentName:"p"},">"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"+"),", or space.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If the line ends with whitespace or an ",(0,r.yg)("inlineCode",{parentName:"p"},"@")," character, an additional ",(0,r.yg)("inlineCode",{parentName:"p"},"@"),"\ncharacter is appended to the line.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The following ASCII control characters or backslash (",(0,r.yg)("inlineCode",{parentName:"p"},"\\"),") are converted\nto a backslash followed by a letter code, in the manner of string literals\nin many languages:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"* a: U+0007 alert or bell\n* b: U+0008 backspace\n* f: U+000C form feed\n* n: U+000A line feed\n* r: U+000D carriage return\n* t: U+0009 horizontal tab\n* v: U+000B vertical tab\n* `\\`: U+005C backslash\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"All other ASCII control characters, plus non-ASCII Unicode code points,\nare shown as either:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"* `\\u` followed by 4 uppercase hex characters for code points\nin the basic multilingual plane (BMP).\n\n* `\\U` followed by 8 uppercase hex characters for other code points.\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The screen will be broken into multiple lines to fit the 80-character\nlimit, considering the above transformations in a way that attempts to\nminimize the number of lines generated. Expanded control or Unicode characters\nare never split across lines."))),(0,r.yg)("p",null,"Example output:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"An introductory line.\nkey1: 123456\nkey2: a string that ends in whitespace   @\nkey3: a string that ends in  a single ampersand - @@\n >tricky key4<: note the leading space in the presentation\nintroducing an aggregate\n> key5: false\n> key6: a very long line of text, please co\\u00F6perate and break into\n>+  multiple lines.\n> Can we do further nesting?\n>> You bet we can!\n")),(0,r.yg)("p",null,"The inverse mapping gives us the only input which could have\ngenerated this output (JSON notation for string data):"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'Indent  Text\n------  ----\n0       "An introductory line."\n0       "key1: 123456"\n0       "key2: a string that ends in whitespace   "\n0       "key3: a string that ends in  a single ampersand - @"\n0       ">tricky key4<: note the leading space in the presentation"\n0       "introducing an aggregate"\n1       "key5: false"\n1       "key6: a very long line of text, please cooperate and break into multiple lines."\n1       "Can we do further nesting?"\n2       "You bet we can!"\n')))}g.isMDXComponent=!0}}]);