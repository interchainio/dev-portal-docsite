"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[48760],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>u});var o=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),l=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=l(e.components);return o.createElement(s.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=l(t),m=a,u=c["".concat(s,".").concat(m)]||c[m]||g[m]||i;return t?o.createElement(u,r(r({ref:n},d),{},{components:t})):o.createElement(u,r({ref:n},d))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[c]="string"==typeof e?e:a,r[1]=p;for(var l=2;l<i;l++)r[l]=t[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},94349:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var o=t(58168),a=(t(96540),t(15680));const i={title:"Integration",sidebar_label:"Integration",sidebar_position:2,slug:"/ibc/integration"},r="Integration",p={unversionedId:"docs/ibc/integration",id:"docs/ibc/integration",title:"Integration",description:"Learn how to integrate IBC to your application and send data packets to other chains.",source:"@site/ibc-go/docs/01-ibc/02-integration.md",sourceDirName:"docs/01-ibc",slug:"/ibc/integration",permalink:"/dev-portal-docsite/ibc-go/next/ibc/integration",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Integration",sidebar_label:"Integration",sidebar_position:2,slug:"/ibc/integration"},sidebar:"defaultSidebar",previous:{title:"Overview",permalink:"/dev-portal-docsite/ibc-go/next/ibc/overview"},next:{title:"IBC Applications",permalink:"/dev-portal-docsite/ibc-go/next/ibc/apps/apps"}},s={},l=[{value:"Integrating the IBC module",id:"integrating-the-ibc-module",level:2},{value:"Add application fields to <code>App</code>",id:"add-application-fields-to-app",level:3},{value:"Configure the <code>Keeper</code>s",id:"configure-the-keepers",level:3},{value:"Register module routes in the IBC <code>Router</code>",id:"register-module-routes-in-the-ibc-router",level:3},{value:"Module <code>Manager</code> and <code>SimulationManager</code>",id:"module-manager-and-simulationmanager",level:3},{value:"Module account permissions",id:"module-account-permissions",level:3},{value:"Integrating light clients",id:"integrating-light-clients",level:4},{value:"Application ABCI ordering",id:"application-abci-ordering",level:3}],d={toc:l},c="wrapper";function g(e){let{components:n,...t}=e;return(0,a.yg)(c,(0,o.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"integration"},"Integration"),(0,a.yg)("admonition",{title:"Synopsis",type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Learn how to integrate IBC to your application and send data packets to other chains.")),(0,a.yg)("p",null,"This document outlines the required steps to integrate and configure the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/tree/main/modules/core"},"IBC\nmodule")," to your Cosmos SDK application and\nsend fungible token transfers to other chains."),(0,a.yg)("h2",{id:"integrating-the-ibc-module"},"Integrating the IBC module"),(0,a.yg)("p",null,"Integrating the IBC module to your SDK-based application is straightforward. The general changes can be summarized in the following steps:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#add-application-fields-to-app"},"Define additional ",(0,a.yg)("inlineCode",{parentName:"a"},"Keeper")," fields for the new modules on the ",(0,a.yg)("inlineCode",{parentName:"a"},"App")," type"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#configure-the-keepers"},"Add the module's ",(0,a.yg)("inlineCode",{parentName:"a"},"StoreKey"),"s and initialize their ",(0,a.yg)("inlineCode",{parentName:"a"},"Keeper"),"s"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#register-module-routes-in-the-ibc-router"},"Set up IBC router and add route for the ",(0,a.yg)("inlineCode",{parentName:"a"},"transfer")," module"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#module-account-permissions"},"Grant permissions to ",(0,a.yg)("inlineCode",{parentName:"a"},"transfer"),"'s ",(0,a.yg)("inlineCode",{parentName:"a"},"ModuleAccount")),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#module-manager-and-simulationmanager"},"Add the modules to the module ",(0,a.yg)("inlineCode",{parentName:"a"},"Manager")),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#module-manager-and-simulationmanager"},"Update the module ",(0,a.yg)("inlineCode",{parentName:"a"},"SimulationManager")," to enable simulations"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#integrating-light-clients"},"Integrate light client modules (e.g. ",(0,a.yg)("inlineCode",{parentName:"a"},"07-tendermint"),")"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#application-abci-ordering"},"Add modules to ",(0,a.yg)("inlineCode",{parentName:"a"},"Begin/EndBlockers")," and ",(0,a.yg)("inlineCode",{parentName:"a"},"InitGenesis")),".")),(0,a.yg)("h3",{id:"add-application-fields-to-app"},"Add application fields to ",(0,a.yg)("inlineCode",{parentName:"h3"},"App")),(0,a.yg)("p",null,"We need to register the core ",(0,a.yg)("inlineCode",{parentName:"p"},"ibc")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"transfer")," ",(0,a.yg)("inlineCode",{parentName:"p"},"Keeper"),"s as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="app.go"',title:'"app.go"'},'import (\n  // other imports\n  // ...\n  ibckeeper "github.com/cosmos/ibc-go/v10/modules/core/keeper"\n  ibctransferkeeper "github.com/cosmos/ibc-go/v10/modules/apps/transfer/keeper"\n)\n\ntype App struct {\n  // baseapp, keys and subspaces definitions\n\n  // other keepers\n  // ...\n  IBCKeeper        *ibckeeper.Keeper // IBC Keeper must be a pointer in the app, so we can SetRouter on it correctly\n  TransferKeeper   ibctransferkeeper.Keeper // for cross-chain fungible token transfers\n\n  // ...\n  // module and simulation manager definitions\n}\n')),(0,a.yg)("h3",{id:"configure-the-keepers"},"Configure the ",(0,a.yg)("inlineCode",{parentName:"h3"},"Keeper"),"s"),(0,a.yg)("p",null,"During initialization, besides initializing the IBC ",(0,a.yg)("inlineCode",{parentName:"p"},"Keeper"),"s (for core ",(0,a.yg)("inlineCode",{parentName:"p"},"ibc")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"transfer")," modules), we need to grant specific capabilities through the capability module ",(0,a.yg)("inlineCode",{parentName:"p"},"ScopedKeeper"),"s so that we can authenticate the object-capability permissions for each of the IBC channels."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'import (\n  // other imports\n  // ...\n  authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"\n\n  capabilitykeeper "github.com/cosmos/ibc-go/modules/capability/keeper"\n  capabilitytypes "github.com/cosmos/ibc-go/modules/capability/types"\n  ibcexported "github.com/cosmos/ibc-go/v10/modules/core/exported"\n  ibckeeper "github.com/cosmos/ibc-go/v10/modules/core/keeper"\n  "github.com/cosmos/ibc-go/v10/modules/apps/transfer"\n  ibctransfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"\n  ibctm "github.com/cosmos/ibc-go/v10/modules/light-clients/07-tendermint"\n)\n\nfunc NewApp(...args) *App {\n  // define codecs and baseapp\n\n  // add capability keeper and ScopeToModule for ibc module\n  app.CapabilityKeeper = capabilitykeeper.NewKeeper(\n    appCodec,\n    keys[capabilitytypes.StoreKey],\n    memKeys[capabilitytypes.MemStoreKey],\n  )\n\n  // grant capabilities for the ibc and transfer modules\n  scopedIBCKeeper := app.CapabilityKeeper.ScopeToModule(ibcexported.ModuleName)\n  scopedTransferKeeper := app.CapabilityKeeper.ScopeToModule(ibctransfertypes.ModuleName)\n\n  // ... other module keepers\n\n  // Create IBC Keeper\n  app.IBCKeeper = ibckeeper.NewKeeper(\n    appCodec,\n    keys[ibcexported.StoreKey],\n    app.GetSubspace(ibcexported.ModuleName),\n    app.UpgradeKeeper,\n    scopedIBCKeeper,\n    authtypes.NewModuleAddress(govtypes.ModuleName).String(),\n  )\n\n  // Create Transfer Keeper\n  app.TransferKeeper = ibctransferkeeper.NewKeeper(\n    appCodec,\n    keys[ibctransfertypes.StoreKey],\n    app.GetSubspace(ibctransfertypes.ModuleName),\n    app.IBCKeeper.ChannelKeeper,\n    app.IBCKeeper.ChannelKeeper,\n    app.IBCKeeper.PortKeeper,\n    app.AccountKeeper,\n    app.BankKeeper,\n    scopedTransferKeeper,\n    authtypes.NewModuleAddress(govtypes.ModuleName).String(),\n  )\n  transferModule := transfer.NewIBCModule(app.TransferKeeper)\n\n  // ... continues\n}\n')),(0,a.yg)("h3",{id:"register-module-routes-in-the-ibc-router"},"Register module routes in the IBC ",(0,a.yg)("inlineCode",{parentName:"h3"},"Router")),(0,a.yg)("p",null,"IBC needs to know which module is bound to which port so that it can route packets to the\nappropriate module and call the appropriate callbacks. The port to module name mapping is handled by\nIBC's port ",(0,a.yg)("inlineCode",{parentName:"p"},"Keeper"),". However, the mapping from module name to the relevant callbacks is accomplished\nby the port\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/main/modules/core/05-port/types/router.go"},(0,a.yg)("inlineCode",{parentName:"a"},"Router"))," on the\n",(0,a.yg)("inlineCode",{parentName:"p"},"ibc")," module."),(0,a.yg)("p",null,"Adding the module routes allows the IBC handler to call the appropriate callback when processing a\nchannel handshake or a packet."),(0,a.yg)("p",null,"Currently, a ",(0,a.yg)("inlineCode",{parentName:"p"},"Router")," is static so it must be initialized and set correctly on app initialization.\nOnce the ",(0,a.yg)("inlineCode",{parentName:"p"},"Router")," has been set, no new routes can be added."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="app.go"',title:'"app.go"'},'import (\n  // other imports\n  // ...\n  porttypes "github.com/cosmos/ibc-go/v10/modules/core/05-port/types" \n  ibctransfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"\n)\n\nfunc NewApp(...args) *App {\n  // .. continuation from above\n\n  // Create static IBC router, add transfer module route, then set and seal it\n  ibcRouter := porttypes.NewRouter()\n  ibcRouter.AddRoute(ibctransfertypes.ModuleName, transferModule)\n  // Setting Router will finalize all routes by sealing router\n  // No more routes can be added\n  app.IBCKeeper.SetRouter(ibcRouter)\n\n  // ... continues\n')),(0,a.yg)("h3",{id:"module-manager-and-simulationmanager"},"Module ",(0,a.yg)("inlineCode",{parentName:"h3"},"Manager")," and ",(0,a.yg)("inlineCode",{parentName:"h3"},"SimulationManager")),(0,a.yg)("p",null,"In order to use IBC, we need to add the new modules to the module ",(0,a.yg)("inlineCode",{parentName:"p"},"Manager")," and to the ",(0,a.yg)("inlineCode",{parentName:"p"},"SimulationManager"),", in case your application supports ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/docs/build/building-modules/14-simulator.md"},"simulations"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="app.go"',title:'"app.go"'},'import (\n  // other imports\n  // ...\n  "github.com/cosmos/cosmos-sdk/types/module"\n\n  ibc "github.com/cosmos/ibc-go/v10/modules/core"\n  "github.com/cosmos/ibc-go/v10/modules/apps/transfer"\n)\n\nfunc NewApp(...args) *App {\n  // ... continuation from above\n\n  app.ModuleManager = module.NewManager(\n    // other modules\n    // ...\n    // highlight-start\n+   ibc.NewAppModule(app.IBCKeeper),\n+   transfer.NewAppModule(app.TransferKeeper),\n    // highlight-end\n  )\n\n  // ...\n\n  app.simulationManager = module.NewSimulationManagerFromAppModules(\n    // other modules\n    // ...\n    app.ModuleManager.Modules,\n    map[string]module.AppModuleSimulation{},\n  )\n\n  // ... continues\n')),(0,a.yg)("h3",{id:"module-account-permissions"},"Module account permissions"),(0,a.yg)("p",null,"After that, we need to grant ",(0,a.yg)("inlineCode",{parentName:"p"},"Minter")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"Burner")," permissions to\nthe ",(0,a.yg)("inlineCode",{parentName:"p"},"transfer")," ",(0,a.yg)("inlineCode",{parentName:"p"},"ModuleAccount")," to mint and burn relayed tokens."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="app.go"',title:'"app.go"'},'import (\n  // other imports\n  // ...\n  "github.com/cosmos/cosmos-sdk/types/module"\n  authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"\n\n  // highlight-next-line\n+ ibctransfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"\n)\n\n// app.go\nvar (\n  // module account permissions\n  maccPerms = map[string][]string{\n    // other module accounts permissions\n    // ...\n    ibctransfertypes.ModuleName: {authtypes.Minter, authtypes.Burner},\n  }\n)\n')),(0,a.yg)("h4",{id:"integrating-light-clients"},"Integrating light clients"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Note that from v9 onwards, all light clients are expected to implement the ",(0,a.yg)("a",{parentName:"p",href:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/light-client-module#implementing-the-lightclientmodule-interface"},(0,a.yg)("inlineCode",{parentName:"a"},"LightClientInterface")," interface")," defined by core IBC, and have to be explicitly registered in a chain's app.go. This is in contrast to earlier versions of ibc-go when ",(0,a.yg)("inlineCode",{parentName:"p"},"07-tendermint")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"06-solomachine")," were added out of the box. Follow the steps below to integrate the ",(0,a.yg)("inlineCode",{parentName:"p"},"07-tendermint")," light client.")),(0,a.yg)("p",null,"All light clients must be registered with ",(0,a.yg)("inlineCode",{parentName:"p"},"module.Manager")," in a chain's app.go file."),(0,a.yg)("p",null,"The following code example shows how to instantiate ",(0,a.yg)("inlineCode",{parentName:"p"},"07-tendermint")," light client module and register its ",(0,a.yg)("inlineCode",{parentName:"p"},"ibctm.AppModule"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="app.go"',title:'"app.go"'},'import (\n  // other imports\n  // ...\n  "github.com/cosmos/cosmos-sdk/types/module"\n  // highlight-next-line\n+ ibctm "github.com/cosmos/ibc-go/v10/modules/light-clients/07-tendermint"\n)\n\n// app.go\n// after sealing the IBC router\n\nstoreProvider := app.IBCKeeper.ClientKeeper.GetStoreProvider()\n\ntmLightClientModule := ibctm.NewLightClientModule(appCodec, storeProvider)\napp.IBCKeeper.ClientKeeper.AddRoute(ibctm.ModuleName, &tmLightClientModule)\napp.ModuleManager = module.NewManager(\n  // ...\n  ibc.NewAppModule(app.IBCKeeper),\n  transfer.NewAppModule(app.TransferKeeper), // i.e ibc-transfer module\n\n  // register light clients on IBC\n  // highlight-next-line\n+ ibctm.NewAppModule(tmLightClientModule),\n)\n')),(0,a.yg)("h3",{id:"application-abci-ordering"},"Application ABCI ordering"),(0,a.yg)("p",null,"One addition from IBC is the concept of ",(0,a.yg)("inlineCode",{parentName:"p"},"HistoricalInfo")," which is stored in the Cosmos SDK ",(0,a.yg)("inlineCode",{parentName:"p"},"x/staking")," module. The number of records stored by ",(0,a.yg)("inlineCode",{parentName:"p"},"x/staking")," is controlled by the ",(0,a.yg)("inlineCode",{parentName:"p"},"HistoricalEntries")," parameter which stores ",(0,a.yg)("inlineCode",{parentName:"p"},"HistoricalInfo")," on a per-height basis.\nEach entry contains the historical information for the ",(0,a.yg)("inlineCode",{parentName:"p"},"Header")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ValidatorSet")," of this chain which is stored\nat each height during the ",(0,a.yg)("inlineCode",{parentName:"p"},"BeginBlock")," call. The ",(0,a.yg)("inlineCode",{parentName:"p"},"HistoricalInfo")," is required to introspect a blockchain's prior state at a given height in order to verify the light client ",(0,a.yg)("inlineCode",{parentName:"p"},"ConsensusState")," during the\nconnection handshake. "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="app.go"',title:'"app.go"'},'import (\n  // other imports\n  // ...\n  stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"\n  ibcexported "github.com/cosmos/ibc-go/v10/modules/core/exported"\n  ibckeeper "github.com/cosmos/ibc-go/v10/modules/core/keeper"\n  ibctransfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"\n)\n\nfunc NewApp(...args) *App {\n  // ... continuation from above\n\n  // add x/staking, ibc and transfer modules to BeginBlockers\n  app.ModuleManager.SetOrderBeginBlockers(\n    // other modules ...\n    stakingtypes.ModuleName,\n    ibcexported.ModuleName,\n    ibctransfertypes.ModuleName,\n  )\n  app.ModuleManager.SetOrderEndBlockers(\n    // other modules ...\n    stakingtypes.ModuleName,\n    ibcexported.ModuleName,\n    ibctransfertypes.ModuleName,\n  )\n\n  // ...\n\n  genesisModuleOrder := []string{\n    // other modules\n    // ...\n    ibcexported.ModuleName,\n    ibctransfertypes.ModuleName,\n  }\n  app.ModuleManager.SetOrderInitGenesis(genesisModuleOrder...)\n\n  // ... continues\n')),(0,a.yg)("p",null,"That's it! You have now wired up the IBC module and the ",(0,a.yg)("inlineCode",{parentName:"p"},"transfer")," module, and are now able to send fungible tokens across\ndifferent chains. If you want to have a broader view of the changes take a look into the SDK's\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/main/testing/simapp/app.go"},(0,a.yg)("inlineCode",{parentName:"a"},"SimApp")),"."))}g.isMDXComponent=!0}}]);