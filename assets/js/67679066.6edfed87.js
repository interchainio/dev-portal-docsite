"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[38852],{15680:(e,o,n)=>{n.d(o,{xA:()=>m,yg:()=>u});var a=n(96540);function t(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function p(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);o&&(a=a.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?p(Object(n),!0).forEach((function(o){t(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function i(e,o){if(null==e)return{};var n,a,t=function(e,o){if(null==e)return{};var n,a,t={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],o.indexOf(n)>=0||(t[n]=e[n]);return t}(e,o);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=a.createContext({}),s=function(e){var o=a.useContext(l),n=o;return e&&(n="function"==typeof e?e(o):r(r({},o),e)),n},m=function(e){var o=s(e.components);return a.createElement(l.Provider,{value:o},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var o=e.children;return a.createElement(a.Fragment,{},o)}},g=a.forwardRef((function(e,o){var n=e.components,t=e.mdxType,p=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=s(n),g=t,u=d["".concat(l,".").concat(g)]||d[g]||c[g]||p;return n?a.createElement(u,r(r({ref:o},m),{},{components:n})):a.createElement(u,r({ref:o},m))}));function u(e,o){var n=arguments,t=o&&o.mdxType;if("string"==typeof e||t){var p=n.length,r=new Array(p);r[0]=g;var i={};for(var l in o)hasOwnProperty.call(o,l)&&(i[l]=o[l]);i.originalType=e,i[d]="string"==typeof e?e:t,r[1]=i;for(var s=2;s<p;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},45958:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>p,metadata:()=>i,toc:()=>s});var a=n(58168),t=(n(96540),n(15680));const p={sidebar_position:1},r="Application mempool",i={unversionedId:"build/building-apps/app-mempool",id:"version-0.47/build/building-apps/app-mempool",title:"Application mempool",description:"This sections describes how the app-side mempool can be used and replaced.",source:"@site/cosmos-sdk_versioned_docs/version-0.47/build/building-apps/02-app-mempool.md",sourceDirName:"build/building-apps",slug:"/build/building-apps/app-mempool",permalink:"/dev-portal-docsite/cosmos-sdk/0.47/build/building-apps/app-mempool",draft:!1,tags:[],version:"0.47",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"buildSidebar",previous:{title:"Overview of app_v2.go",permalink:"/dev-portal-docsite/cosmos-sdk/0.47/build/building-apps/app-go-v2"},next:{title:"Application upgrade",permalink:"/dev-portal-docsite/cosmos-sdk/0.47/build/building-apps/app-upgrade"}},l={},s=[{value:"Prepare Proposal",id:"prepare-proposal",level:2},{value:"Process Proposal",id:"process-proposal",level:2},{value:"Mempool",id:"mempool",level:2},{value:"No-op Mempool",id:"no-op-mempool",level:3},{value:"Sender Nonce Mempool",id:"sender-nonce-mempool",level:3},{value:"MaxTxs",id:"maxtxs",level:4},{value:"Seed",id:"seed",level:4},{value:"Priority Nonce Mempool",id:"priority-nonce-mempool",level:3},{value:"MaxTxs",id:"maxtxs-1",level:4},{value:"Callback",id:"callback",level:4}],m={toc:s},d="wrapper";function c(e){let{components:o,...n}=e;return(0,t.yg)(d,(0,a.A)({},m,n,{components:o,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"application-mempool"},"Application mempool"),(0,t.yg)("admonition",{title:"Synopsis",type:"note"},(0,t.yg)("p",{parentName:"admonition"},"This sections describes how the app-side mempool can be used and replaced. ")),(0,t.yg)("p",null,"Since ",(0,t.yg)("inlineCode",{parentName:"p"},"v0.47")," the application has its own mempool to allow much more granular\nblock building than previous versions. This change was enabled by\n",(0,t.yg)("a",{parentName:"p",href:"https://https://github.com/cometbft/cometbft/blob/v0.37.0/spec/abci"},"ABCI 1.0"),".\nNotably it introduces the ",(0,t.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," steps of ABCI++."),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("h3",{parentName:"admonition",id:"pre-requisite-readings"},"Pre-requisite Readings"),(0,t.yg)("ul",{parentName:"admonition"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/dev-portal-docsite/cosmos-sdk/0.47/learn/advanced/baseapp"},"BaseApp")))),(0,t.yg)("h2",{id:"prepare-proposal"},"Prepare Proposal"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," handles construction of the block, meaning that when a proposer\nis preparing to propose a block, it requests the application to evaluate a\n",(0,t.yg)("inlineCode",{parentName:"p"},"RequestPrepareProposal"),", which contains a series of transactions from CometBFT's\nmempool. At this point, the application has complete control over the proposal.\nIt can modify, delete, and inject transactions from it's own app-side mempool into\nthe proposal or even ignore all the transactions altogether. What the application\ndoes with the transactions provided to it by ",(0,t.yg)("inlineCode",{parentName:"p"},"RequestPrepareProposal")," have no\neffect on CometBFT's mempool."),(0,t.yg)("p",null,"Note, that the application defines the semantics of the ",(0,t.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," and it\nMAY be non-deterministic and is only executed by the current block proposer."),(0,t.yg)("p",null,"Now, reading mempool twice in the previous sentence is confusing, lets break it down.\nCometBFT has a mempool that handles gossiping transactions to other nodes\nin the network. How these transactions are ordered is determined by CometBFT's\nmempool, typically FIFO. However, since the application is able to fully inspect\nall transactions, it can provide greater control over transaction ordering.\nAllowing the application to handle ordering enables the application to define how\nit would like the block constructed. "),(0,t.yg)("p",null,"Currently, there is a default ",(0,t.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," implementation provided by the application."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/baseapp/baseapp.go#L868-L916\n")),(0,t.yg)("p",null,"This default implementation can be overridden by the application developer in\nfavor of a custom implementation in ",(0,t.yg)("a",{parentName:"p",href:"/dev-portal-docsite/cosmos-sdk/0.47/build/building-apps/app-go-v2"},(0,t.yg)("inlineCode",{parentName:"a"},"app.go")),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},"prepareOpt := func(app *baseapp.BaseApp) {\n    abciPropHandler := baseapp.NewDefaultProposalHandler(mempool, app)\n    app.SetPrepareProposal(abciPropHandler.PrepareProposalHandler())\n}\n\nbaseAppOptions = append(baseAppOptions, prepareOpt)\n")),(0,t.yg)("h2",{id:"process-proposal"},"Process Proposal"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," handles the validation of a proposal from ",(0,t.yg)("inlineCode",{parentName:"p"},"PrepareProposal"),",\nwhich also includes a block header. Meaning, that after a block has been proposed\nthe other validators have the right to vote on a block. The validator in the\ndefault implementation of ",(0,t.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," runs basic validity checks on each\ntransaction."),(0,t.yg)("p",null,"Note, ",(0,t.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," MAY NOT be non-deterministic, i.e. it must be deterministic.\nThis means if ",(0,t.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," panics or fails and we reject, all honest validator\nprocesses will prevote nil and the CometBFT round will proceed again until a valid\nproposal is proposed."),(0,t.yg)("p",null,"Here is the implementation of the default implementation:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/baseapp/baseapp.go#L927-L942\n")),(0,t.yg)("p",null,"Like ",(0,t.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," this implementation is the default and can be modified by the application developer in ",(0,t.yg)("a",{parentName:"p",href:"/dev-portal-docsite/cosmos-sdk/0.47/build/building-apps/app-go-v2"},(0,t.yg)("inlineCode",{parentName:"a"},"app.go")),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},"processOpt := func(app *baseapp.BaseApp) {\n    abciPropHandler := baseapp.NewDefaultProposalHandler(mempool, app)\n    app.SetProcessProposal(abciPropHandler.ProcessProposalHandler())\n}\n\nbaseAppOptions = append(baseAppOptions, processOpt)\n")),(0,t.yg)("h2",{id:"mempool"},"Mempool"),(0,t.yg)("p",null,"Now that we have walked through the ",(0,t.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," & ",(0,t.yg)("inlineCode",{parentName:"p"},"ProcessProposal"),", we can move on to walking through the mempool. "),(0,t.yg)("p",null,"There are countless designs that an application developer can write for a mempool, the SDK opted to provide only simple mempool implementations.\nNamely, the SDK provides the following mempools:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#no-op-mempool"},"No-op Mempool")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#sender-nonce-mempool"},"Sender Nonce Mempool")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#priority-nonce-mempool"},"Priority Nonce Mempool"))),(0,t.yg)("p",null,"The default SDK is a ",(0,t.yg)("a",{parentName:"p",href:"#no-op-mempool"},"No-op Mempool"),", but it can be replaced by the application developer in ",(0,t.yg)("a",{parentName:"p",href:"/dev-portal-docsite/cosmos-sdk/0.47/build/building-apps/app-go-v2"},(0,t.yg)("inlineCode",{parentName:"a"},"app.go")),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},"nonceMempool := mempool.NewSenderNonceMempool()\nmempoolOpt   := baseapp.SetMempool(nonceMempool)\nbaseAppOptions = append(baseAppOptions, mempoolOpt)\n")),(0,t.yg)("h3",{id:"no-op-mempool"},"No-op Mempool"),(0,t.yg)("p",null,"A no-op mempool is a mempool where transactions are completely discarded and ignored when BaseApp interacts with the mempool.\nWhen this mempool is used, it assumed that an application will rely on CometBFT's transaction ordering defined in ",(0,t.yg)("inlineCode",{parentName:"p"},"RequestPrepareProposal"),",\nwhich is FIFO-ordered by default."),(0,t.yg)("h3",{id:"sender-nonce-mempool"},"Sender Nonce Mempool"),(0,t.yg)("p",null,"The nonce mempool is a mempool that keeps transactions from an sorted by nonce in order to avoid the issues with nonces.\nIt works by storing the transaction in a list sorted by the transaction nonce. When the proposer asks for transactions to be included in a block it randomly selects a sender and gets the first transaction in the list. It repeats this until the mempool is empty or the block is full. "),(0,t.yg)("p",null,"It is configurable with the following parameters:"),(0,t.yg)("h4",{id:"maxtxs"},"MaxTxs"),(0,t.yg)("p",null,"It is an integer value that sets the mempool in one of three modes, ",(0,t.yg)("em",{parentName:"p"},"bounded"),", ",(0,t.yg)("em",{parentName:"p"},"unbounded"),", or ",(0,t.yg)("em",{parentName:"p"},"disabled"),"."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"negative"),": Disabled, mempool does not insert new transaction and return early."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"zero"),": Unbounded mempool has no transaction limit and will never fail with ",(0,t.yg)("inlineCode",{parentName:"li"},"ErrMempoolTxMaxCapacity"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"positive"),": Bounded, it fails with ",(0,t.yg)("inlineCode",{parentName:"li"},"ErrMempoolTxMaxCapacity")," when ",(0,t.yg)("inlineCode",{parentName:"li"},"maxTx")," value is the same as ",(0,t.yg)("inlineCode",{parentName:"li"},"CountTx()"))),(0,t.yg)("h4",{id:"seed"},"Seed"),(0,t.yg)("p",null,"Set the seed for the random number generator used to select transactions from the mempool."),(0,t.yg)("h3",{id:"priority-nonce-mempool"},"Priority Nonce Mempool"),(0,t.yg)("p",null,"The ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/types/mempool/priority_nonce_spec.md"},"priority nonce mempool")," is a mempool implementation that stores txs in a partially ordered set by 2 dimensions:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"priority"),(0,t.yg)("li",{parentName:"ul"},"sender-nonce (sequence number)")),(0,t.yg)("p",null,"Internally it uses one priority ordered ",(0,t.yg)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/huandu/skiplist"},"skip list")," and one skip list per sender ordered by sender-nonce (sequence number). When there are multiple txs from the same sender, they are not always comparable by priority to other sender txs and must be partially ordered by both sender-nonce and priority."),(0,t.yg)("p",null,"It is configurable with the following parameters:"),(0,t.yg)("h4",{id:"maxtxs-1"},"MaxTxs"),(0,t.yg)("p",null,"It is an integer value that sets the mempool in one of three modes, ",(0,t.yg)("em",{parentName:"p"},"bounded"),", ",(0,t.yg)("em",{parentName:"p"},"unbounded"),", or ",(0,t.yg)("em",{parentName:"p"},"disabled"),"."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"negative"),": Disabled, mempool does not insert new transaction and return early."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"zero"),": Unbounded mempool has no transaction limit and will never fail with ",(0,t.yg)("inlineCode",{parentName:"li"},"ErrMempoolTxMaxCapacity"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"positive"),": Bounded, it fails with ",(0,t.yg)("inlineCode",{parentName:"li"},"ErrMempoolTxMaxCapacity")," when ",(0,t.yg)("inlineCode",{parentName:"li"},"maxTx")," value is the same as ",(0,t.yg)("inlineCode",{parentName:"li"},"CountTx()"))),(0,t.yg)("h4",{id:"callback"},"Callback"),(0,t.yg)("p",null,"The priority nonce mempool provides mempool options allowing the application sets callback(s)."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"OnRead"),": Set a callback to be called when a transaction is read from the mempool."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"TxReplacement"),": Sets a callback to be called when duplicated transaction nonce detected during mempool insert. Application can define a transaction replacement rule based on tx priority or certain transaction fields.")),(0,t.yg)("p",null,"More information on the SDK mempool implementation can be found in the ",(0,t.yg)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/cosmos/cosmos-sdk/types/mempool"},"godocs"),"."))}c.isMDXComponent=!0}}]);