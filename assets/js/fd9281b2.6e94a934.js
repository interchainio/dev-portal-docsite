"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[82457],{15680:(e,t,i)=>{i.d(t,{xA:()=>p,yg:()=>g});var n=i(96540);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var d=n.createContext({}),s=function(e){var t=n.useContext(d),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},p=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(i),m=a,g=c["".concat(d,".").concat(m)]||c[m]||h[m]||o;return i?n.createElement(g,r(r({ref:t},p),{},{components:i})):n.createElement(g,r({ref:t},p))}));function g(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=i.length,r=new Array(o);r[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=i[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},18899:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=i(58168),a=(i(96540),i(15680));const o={title:"Light Client Module interface",sidebar_label:"Light Client Module interface",sidebar_position:2,slug:"/ibc/light-clients/light-client-module"},r="Implementing the LightClientModule interface",l={unversionedId:"docs/light-clients/developer-guide/light-client-module",id:"docs/light-clients/developer-guide/light-client-module",title:"Light Client Module interface",description:"Status method",source:"@site/ibc-go/docs/03-light-clients/01-developer-guide/02-light-client-module.md",sourceDirName:"docs/03-light-clients/01-developer-guide",slug:"/ibc/light-clients/light-client-module",permalink:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/light-client-module",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Light Client Module interface",sidebar_label:"Light Client Module interface",sidebar_position:2,slug:"/ibc/light-clients/light-client-module"},sidebar:"defaultSidebar",previous:{title:"Overview",permalink:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/overview"},next:{title:"Client State interface",permalink:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/client-state"}},d={},s=[{value:"<code>Status</code> method",id:"status-method",level:2},{value:"<code>TimestampAtHeight</code> method",id:"timestampatheight-method",level:2},{value:"<code>LatestHeight</code> method",id:"latestheight-method",level:2},{value:"<code>Initialize</code> method",id:"initialize-method",level:2},{value:"<code>UpdateState</code> method",id:"updatestate-method",level:2},{value:"<code>UpdateStateOnMisbehaviour</code> method",id:"updatestateonmisbehaviour-method",level:2},{value:"<code>VerifyMembership</code> method",id:"verifymembership-method",level:2},{value:"<code>VerifyNonMembership</code> method",id:"verifynonmembership-method",level:2},{value:"<code>VerifyClientMessage</code> method",id:"verifyclientmessage-method",level:2},{value:"<code>CheckForMisbehaviour</code> method",id:"checkformisbehaviour-method",level:2},{value:"<code>RecoverClient</code> method",id:"recoverclient-method",level:2},{value:"<code>VerifyUpgradeAndUpdateState</code> method",id:"verifyupgradeandupdatestate-method",level:2}],p={toc:s},c="wrapper";function h(e){let{components:t,...i}=e;return(0,a.yg)(c,(0,n.A)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"implementing-the-lightclientmodule-interface"},"Implementing the ",(0,a.yg)("inlineCode",{parentName:"h1"},"LightClientModule")," interface"),(0,a.yg)("h2",{id:"status-method"},(0,a.yg)("inlineCode",{parentName:"h2"},"Status")," method"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"Status")," must return the status of the client."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"An ",(0,a.yg)("inlineCode",{parentName:"li"},"Active")," status indicates that clients are allowed to process packets."),(0,a.yg)("li",{parentName:"ul"},"A ",(0,a.yg)("inlineCode",{parentName:"li"},"Frozen")," status indicates that misbehaviour was detected in the counterparty chain and the client is not allowed to be used."),(0,a.yg)("li",{parentName:"ul"},"An ",(0,a.yg)("inlineCode",{parentName:"li"},"Expired")," status indicates that a client is not allowed to be used because it was not updated for longer than the trusting period."),(0,a.yg)("li",{parentName:"ul"},"An ",(0,a.yg)("inlineCode",{parentName:"li"},"Unknown")," status indicates that there was an error in determining the status of a client.")),(0,a.yg)("p",null,"All possible ",(0,a.yg)("inlineCode",{parentName:"p"},"Status")," types can be found ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v7.0.0/modules/core/exported/client.go#L22-L32"},"here"),"."),(0,a.yg)("p",null,"This field is returned in the response of the gRPC ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v7.0.0/modules/core/02-client/types/query.pb.go#L665"},(0,a.yg)("inlineCode",{parentName:"a"},"ibc.core.client.v1.Query/ClientStatus"))," endpoint."),(0,a.yg)("h2",{id:"timestampatheight-method"},(0,a.yg)("inlineCode",{parentName:"h2"},"TimestampAtHeight")," method"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"TimestampAtHeight")," must return the timestamp for the consensus state associated with the provided height.\nThis value is used to facilitate timeouts by checking the packet timeout timestamp against the returned value."),(0,a.yg)("h2",{id:"latestheight-method"},(0,a.yg)("inlineCode",{parentName:"h2"},"LatestHeight")," method"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"LatestHeight")," should return the latest block height that the client state represents."),(0,a.yg)("h2",{id:"initialize-method"},(0,a.yg)("inlineCode",{parentName:"h2"},"Initialize")," method"),(0,a.yg)("p",null,"Clients must validate the initial consensus state, and set the initial client state and consensus state in the provided client store.\nClients may also store any necessary client-specific metadata."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"Initialize")," is called when a ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v7.0.0/modules/core/02-client/keeper/client.go#L30"},"client is created"),"."),(0,a.yg)("h2",{id:"updatestate-method"},(0,a.yg)("inlineCode",{parentName:"h2"},"UpdateState")," method"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"UpdateState")," updates and stores as necessary any associated information for an IBC client, such as the ",(0,a.yg)("inlineCode",{parentName:"p"},"ClientState")," and corresponding ",(0,a.yg)("inlineCode",{parentName:"p"},"ConsensusState"),". See section ",(0,a.yg)("a",{parentName:"p",href:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/updates-and-misbehaviour#updatestate"},(0,a.yg)("inlineCode",{parentName:"a"},"UpdateState"))," for more information."),(0,a.yg)("h2",{id:"updatestateonmisbehaviour-method"},(0,a.yg)("inlineCode",{parentName:"h2"},"UpdateStateOnMisbehaviour")," method"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"UpdateStateOnMisbehaviour")," should perform appropriate state changes on a client state given that misbehaviour has been detected and verified. See section ",(0,a.yg)("a",{parentName:"p",href:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/updates-and-misbehaviour#updatestateonmisbehaviour"},(0,a.yg)("inlineCode",{parentName:"a"},"UpdateStateOnMisbehaviour"))," for more information."),(0,a.yg)("h2",{id:"verifymembership-method"},(0,a.yg)("inlineCode",{parentName:"h2"},"VerifyMembership")," method"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"VerifyMembership")," must verify the existence of a value at a given commitment path at the specified height. For more information about membership proofs\nsee the ",(0,a.yg)("a",{parentName:"p",href:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/proofs"},"Existence and non-existence proofs section"),"."),(0,a.yg)("h2",{id:"verifynonmembership-method"},(0,a.yg)("inlineCode",{parentName:"h2"},"VerifyNonMembership")," method"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"VerifyNonMembership")," must verify the absence of a value at a given commitment path at a specified height. For more information about non-membership proofs\nsee the ",(0,a.yg)("a",{parentName:"p",href:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/proofs"},"Existence and non-existence proofs section"),"."),(0,a.yg)("h2",{id:"verifyclientmessage-method"},(0,a.yg)("inlineCode",{parentName:"h2"},"VerifyClientMessage")," method"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"VerifyClientMessage")," must verify a ",(0,a.yg)("inlineCode",{parentName:"p"},"ClientMessage"),". A ",(0,a.yg)("inlineCode",{parentName:"p"},"ClientMessage")," could be a ",(0,a.yg)("inlineCode",{parentName:"p"},"Header"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"Misbehaviour"),", or batch update.\nIt must handle each type of ",(0,a.yg)("inlineCode",{parentName:"p"},"ClientMessage")," appropriately. Calls to ",(0,a.yg)("inlineCode",{parentName:"p"},"CheckForMisbehaviour"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"UpdateState"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"UpdateStateOnMisbehaviour"),"\nwill assume that the content of the ",(0,a.yg)("inlineCode",{parentName:"p"},"ClientMessage")," has been verified and can be trusted. An error should be returned\nif the ClientMessage fails to verify. See section ",(0,a.yg)("a",{parentName:"p",href:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/updates-and-misbehaviour#verifyclientmessage"},(0,a.yg)("inlineCode",{parentName:"a"},"VerifyClientMessage"))," for more information."),(0,a.yg)("h2",{id:"checkformisbehaviour-method"},(0,a.yg)("inlineCode",{parentName:"h2"},"CheckForMisbehaviour")," method"),(0,a.yg)("p",null,"Checks for evidence of a misbehaviour in ",(0,a.yg)("inlineCode",{parentName:"p"},"Header")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"Misbehaviour")," type. It assumes the ",(0,a.yg)("inlineCode",{parentName:"p"},"ClientMessage"),"\nhas already been verified. See section ",(0,a.yg)("a",{parentName:"p",href:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/updates-and-misbehaviour#checkformisbehaviour"},(0,a.yg)("inlineCode",{parentName:"a"},"CheckForMisbehaviour"))," for more information."),(0,a.yg)("h2",{id:"recoverclient-method"},(0,a.yg)("inlineCode",{parentName:"h2"},"RecoverClient")," method"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"RecoverClient")," is used to recover an expired or frozen client by updating the client with the state of a substitute client. The method must verify that the provided substitute may be used to update the subject client. See section ",(0,a.yg)("a",{parentName:"p",href:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/proposals#implementing-recoverclient"},"Implementing ",(0,a.yg)("inlineCode",{parentName:"a"},"RecoverClient"))," for more information."),(0,a.yg)("h2",{id:"verifyupgradeandupdatestate-method"},(0,a.yg)("inlineCode",{parentName:"h2"},"VerifyUpgradeAndUpdateState")," method"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"VerifyUpgradeAndUpdateState")," provides a path to upgrading clients given an upgraded ",(0,a.yg)("inlineCode",{parentName:"p"},"ClientState"),", upgraded ",(0,a.yg)("inlineCode",{parentName:"p"},"ConsensusState")," and proofs for each. See section ",(0,a.yg)("a",{parentName:"p",href:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/upgrades#implementing-verifyupgradeandupdatestate"},"Implementing ",(0,a.yg)("inlineCode",{parentName:"a"},"VerifyUpgradeAndUpdateState"))," for more information."))}h.isMDXComponent=!0}}]);