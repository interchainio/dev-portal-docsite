"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[18478],{15680:(e,o,r)=>{r.d(o,{xA:()=>c,yg:()=>b});var t=r(96540);function n(e,o,r){return o in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r,e}function a(e,o){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),r.push.apply(r,t)}return r}function p(e){for(var o=1;o<arguments.length;o++){var r=null!=arguments[o]?arguments[o]:{};o%2?a(Object(r),!0).forEach((function(o){n(e,o,r[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(r,o))}))}return e}function s(e,o){if(null==e)return{};var r,t,n=function(e,o){if(null==e)return{};var r,t,n={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],o.indexOf(r)>=0||(n[r]=e[r]);return n}(e,o);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],o.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=t.createContext({}),l=function(e){var o=t.useContext(i),r=o;return e&&(r="function"==typeof e?e(o):p(p({},o),e)),r},c=function(e){var o=l(e.components);return t.createElement(i.Provider,{value:o},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},m=t.forwardRef((function(e,o){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(r),m=n,b=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return r?t.createElement(b,p(p({ref:o},c),{},{components:r})):t.createElement(b,p({ref:o},c))}));function b(e,o){var r=arguments,n=o&&o.mdxType;if("string"==typeof e||n){var a=r.length,p=new Array(a);p[0]=m;var s={};for(var i in o)hasOwnProperty.call(o,i)&&(s[i]=o[i]);s.originalType=e,s[d]="string"==typeof e?e:n,p[1]=s;for(var l=2;l<a;l++)p[l]=r[l];return t.createElement.apply(null,p)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},58526:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>i,contentTitle:()=>p,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var t=r(58168),n=(r(96540),r(15680));const a={},p="Process Proposal",s={unversionedId:"docs/build/abci/process-proposal",id:"docs/build/abci/process-proposal",title:"Process Proposal",description:"ProcessProposal handles the validation of a proposal from PrepareProposal,",source:"@site/cosmos-sdk/docs/build/abci/02-process-proposal.md",sourceDirName:"docs/build/abci",slug:"/docs/build/abci/process-proposal",permalink:"/dev-portal-docsite/cosmos-sdk/next/docs/build/abci/process-proposal",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"buildSidebar",previous:{title:"Prepare Proposal",permalink:"/dev-portal-docsite/cosmos-sdk/next/docs/build/abci/prepare-proposal"},next:{title:"Vote Extensions",permalink:"/dev-portal-docsite/cosmos-sdk/next/docs/build/abci/vote-extensions"}},i={},l=[],c={toc:l},d="wrapper";function u(e){let{components:o,...r}=e;return(0,n.yg)(d,(0,t.A)({},c,r,{components:o,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"process-proposal"},"Process Proposal"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," handles the validation of a proposal from ",(0,n.yg)("inlineCode",{parentName:"p"},"PrepareProposal"),",\nwhich also includes a block header. Meaning, that after a block has been proposed\nthe other validators have the right to accept or reject that block. The validator in the\ndefault implementation of ",(0,n.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," runs basic validity checks on each\ntransaction."),(0,n.yg)("p",null,"Note, ",(0,n.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," MAY NOT be non-deterministic, i.e. it must be deterministic.\nThis means if ",(0,n.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," panics or fails and we reject, all honest validator\nprocesses should reject (i.e., prevote nil). If so, then CometBFT will start a new round with a new block proposal, and the same cycle will happen with ",(0,n.yg)("inlineCode",{parentName:"p"},"PrepareProposal"),"\nand ",(0,n.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," for the new proposal."),(0,n.yg)("p",null,"Here is the implementation of the default implementation:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.52.0-beta.1/baseapp/abci_utils.go#L224-L231\n")),(0,n.yg)("p",null,"Like ",(0,n.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," this implementation is the default and can be modified by\nthe application developer in ",(0,n.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/build/building-apps/app-go-di"},(0,n.yg)("inlineCode",{parentName:"a"},"app_di.go")),". If you decide to implement\nyour own ",(0,n.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," handler, you must ensure that the transactions\nprovided in the proposal DO NOT exceed the maximum block gas and ",(0,n.yg)("inlineCode",{parentName:"p"},"maxtxbytes")," (if set)."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-go"},"processOpt := func(app *baseapp.BaseApp) {\n    abciPropHandler := baseapp.NewDefaultProposalHandler(mempool, app)\n    app.SetProcessProposal(abciPropHandler.ProcessProposalHandler())\n}\n\nbaseAppOptions = append(baseAppOptions, processOpt)\n")))}u.isMDXComponent=!0}}]);