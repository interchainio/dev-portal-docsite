"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[10434],{15680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>g});var a=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(n),p=i,g=u["".concat(s,".").concat(p)]||u[p]||d[p]||o;return n?a.createElement(g,r(r({ref:t},m),{},{components:n})):a.createElement(g,r({ref:t},m))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},18422:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(58168),i=(n(96540),n(15680));const o={},r="ADR 058: Auto-Generated CLI",l={unversionedId:"docs/architecture/adr-058-auto-generated-cli",id:"docs/architecture/adr-058-auto-generated-cli",title:"ADR 058: Auto-Generated CLI",description:"Changelog",source:"@site/cosmos-sdk/docs/architecture/adr-058-auto-generated-cli.md",sourceDirName:"docs/architecture",slug:"/docs/architecture/adr-058-auto-generated-cli",permalink:"/dev-portal-docsite/cosmos-sdk/next/docs/architecture/adr-058-auto-generated-cli",draft:!1,tags:[],version:"current",frontMatter:{}},s={},c=[{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Consequences",id:"consequences",level:2},{value:"Backwards Compatibility",id:"backwards-compatibility",level:3},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Further Discussions",id:"further-discussions",level:2},{value:"References",id:"references",level:2}],m={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.yg)(u,(0,a.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"adr-058-auto-generated-cli"},"ADR 058: Auto-Generated CLI"),(0,i.yg)("h2",{id:"changelog"},"Changelog"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"2022-05-04: Initial Draft")),(0,i.yg)("h2",{id:"status"},"Status"),(0,i.yg)("p",null,"ACCEPTED Partially Implemented"),(0,i.yg)("h2",{id:"abstract"},"Abstract"),(0,i.yg)("p",null,"In order to make it easier for developers to write Cosmos SDK modules, we provide infrastructure which automatically\ngenerates CLI commands based on protobuf definitions."),(0,i.yg)("h2",{id:"context"},"Context"),(0,i.yg)("p",null,"Current Cosmos SDK modules generally implement a CLI command for every transaction and every query supported by the\nmodule. These are handwritten for each command and essentially amount to providing some CLI flags or positional\narguments for specific fields in protobuf messages."),(0,i.yg)("p",null,"In order to make sure CLI commands are correctly implemented as well as to make sure that the application works\nin end-to-end scenarios, we do integration tests using CLI commands. While these tests are valuable on some-level,\nthey can be hard to write and maintain, and run slowly. ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/regen-network/regen-ledger/issues/1041"},"Some teams have contemplated"),"\nmoving away from CLI-style integration tests (which are really end-to-end tests) towards narrower integration tests\nwhich exercise ",(0,i.yg)("inlineCode",{parentName:"p"},"MsgClient")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"QueryClient")," directly. This might involve replacing the current end-to-end CLI\ntests with unit tests as there still needs to be some way to test these CLI commands for full quality assurance."),(0,i.yg)("h2",{id:"decision"},"Decision"),(0,i.yg)("p",null,"To make module development simpler, we provide infrastructure - in the new ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/tree/main/client/v2"},(0,i.yg)("inlineCode",{parentName:"a"},"client/v2")),"\ngo module - for automatically generating CLI commands based on protobuf definitions to either replace or complement\nhandwritten CLI commands. This will mean that when developing a module, it will be possible to skip both writing and\ntesting CLI commands as that can all be taken care of by the framework."),(0,i.yg)("p",null,"The basic design for automatically generating CLI commands is to:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"create one CLI command for each ",(0,i.yg)("inlineCode",{parentName:"li"},"rpc")," method in a protobuf ",(0,i.yg)("inlineCode",{parentName:"li"},"Query")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"Msg")," service"),(0,i.yg)("li",{parentName:"ul"},"create a CLI flag for each field in the ",(0,i.yg)("inlineCode",{parentName:"li"},"rpc")," request type"),(0,i.yg)("li",{parentName:"ul"},"for ",(0,i.yg)("inlineCode",{parentName:"li"},"query")," commands call gRPC and print the response as protobuf JSON or YAML (via the ",(0,i.yg)("inlineCode",{parentName:"li"},"-o"),"/",(0,i.yg)("inlineCode",{parentName:"li"},"--output")," flag)"),(0,i.yg)("li",{parentName:"ul"},"for ",(0,i.yg)("inlineCode",{parentName:"li"},"tx")," commands, create a transaction and apply common transaction flags")),(0,i.yg)("p",null,"In order to make the auto-generated CLI as easy to use (or easier) than handwritten CLI, we need to do custom handling\nof specific protobuf field types so that the input format is easy for humans:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Coin"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"Coins"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"DecCoin"),", and ",(0,i.yg)("inlineCode",{parentName:"li"},"DecCoins")," should be input using the existing format (i.e. ",(0,i.yg)("inlineCode",{parentName:"li"},"1000uatom"),")"),(0,i.yg)("li",{parentName:"ul"},"it should be possible to specify an address using either the bech32 address string or a named key in the keyring"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Timestamp")," and ",(0,i.yg)("inlineCode",{parentName:"li"},"Duration")," should accept strings like ",(0,i.yg)("inlineCode",{parentName:"li"},"2001-01-01T00:00:00Z")," and ",(0,i.yg)("inlineCode",{parentName:"li"},"1h3m")," respectively"),(0,i.yg)("li",{parentName:"ul"},"pagination should be handled with flags like ",(0,i.yg)("inlineCode",{parentName:"li"},"--page-limit"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"--page-offset"),", etc."),(0,i.yg)("li",{parentName:"ul"},"it should be possible to customize any other protobuf type either via its message name or a ",(0,i.yg)("inlineCode",{parentName:"li"},"cosmos_proto.scalar")," annotation")),(0,i.yg)("p",null,"At a basic level it should be possible to generate a command for a single ",(0,i.yg)("inlineCode",{parentName:"p"},"rpc")," method as well as all the commands for\na whole protobuf ",(0,i.yg)("inlineCode",{parentName:"p"},"service")," definition. It should be possible to mix and match auto-generated and handwritten commands."),(0,i.yg)("h2",{id:"consequences"},"Consequences"),(0,i.yg)("h3",{id:"backwards-compatibility"},"Backwards Compatibility"),(0,i.yg)("p",null,"Existing modules can mix and match auto-generated and handwritten CLI commands so it is up to them as to whether they\nmake breaking changes by replacing handwritten commands with slightly different auto-generated ones."),(0,i.yg)("p",null,"For now the SDK will maintain the existing set of CLI commands for backwards compatibility but new commands will use\nthis functionality."),(0,i.yg)("h3",{id:"positive"},"Positive"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"module developers will not need to write CLI commands"),(0,i.yg)("li",{parentName:"ul"},"module developers will not need to test CLI commands"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://github.com/strangelove-ventures/lens"},"lens")," may benefit from this")),(0,i.yg)("h3",{id:"negative"},"Negative"),(0,i.yg)("h3",{id:"neutral"},"Neutral"),(0,i.yg)("h2",{id:"further-discussions"},"Further Discussions"),(0,i.yg)("p",null,"We would like to be able to customize:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"short and long usage strings for commands"),(0,i.yg)("li",{parentName:"ul"},"aliases for flags (ex. ",(0,i.yg)("inlineCode",{parentName:"li"},"-a")," for ",(0,i.yg)("inlineCode",{parentName:"li"},"--amount"),")"),(0,i.yg)("li",{parentName:"ul"},"which fields are positional parameters rather than flags")),(0,i.yg)("p",null,"It is an ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/pull/11725#issuecomment-1108676129"},"open discussion"),"\nas to whether these customizations options should line in:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"the .proto files themselves,"),(0,i.yg)("li",{parentName:"ul"},"separate config files (ex. YAML), or"),(0,i.yg)("li",{parentName:"ul"},"directly in code")),(0,i.yg)("p",null,"Providing the options in .proto files would allow a dynamic client to automatically generate\nCLI commands on the fly. However, that may pollute the .proto files themselves with information that is only relevant\nfor a small subset of users."),(0,i.yg)("h2",{id:"references"},"References"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://github.com/regen-network/regen-ledger/issues/1041"},"https://github.com/regen-network/regen-ledger/issues/1041")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://github.com/cosmos/cosmos-sdk/tree/main/client/v2"},"https://github.com/cosmos/cosmos-sdk/tree/main/client/v2")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://github.com/cosmos/cosmos-sdk/pull/11725#issuecomment-1108676129"},"https://github.com/cosmos/cosmos-sdk/pull/11725#issuecomment-1108676129"))))}d.isMDXComponent=!0}}]);