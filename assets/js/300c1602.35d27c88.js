"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[26050],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var o=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=o.createContext({}),l=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return o.createElement(p.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(t),u=a,m=c["".concat(p,".").concat(u)]||c[u]||g[u]||r;return t?o.createElement(m,i(i({ref:n},d),{},{components:t})):o.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},87174:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=t(58168),a=(t(96540),t(15680));const r={},i="Upgrading Cosmos SDK",s={unversionedId:"build/migrations/upgrading",id:"version-0.52/build/migrations/upgrading",title:"Upgrading Cosmos SDK",description:"This guide provides instructions for upgrading to specific versions of Cosmos SDK.",source:"@site/cosmos-sdk_versioned_docs/version-0.52/build/migrations/02-upgrading.md",sourceDirName:"build/migrations",slug:"/build/migrations/upgrading",permalink:"/dev-portal-docsite/cosmos-sdk/build/migrations/upgrading",draft:!1,tags:[],version:"0.52",sidebarPosition:2,frontMatter:{},sidebar:"buildSidebar",previous:{title:"SDK Migrations",permalink:"/dev-portal-docsite/cosmos-sdk/build/migrations/intro"},next:{title:"Packages",permalink:"/dev-portal-docsite/cosmos-sdk/build/packages/"}},p={},l=[{value:"v0.52.x",id:"v052x",level:2},{value:"SimApp",id:"simapp",level:3},{value:"Client (<code>root.go</code>)",id:"client-rootgo",level:4},{value:"Server (<code>app.go</code>)",id:"server-appgo",level:4},{value:"Module Manager",id:"module-manager",level:5},{value:"gRPC Web",id:"grpc-web",level:5},{value:"AnteHandlers",id:"antehandlers",level:5},{value:"Unordered Transactions",id:"unordered-transactions",level:4},{value:"Sign Mode Textual",id:"sign-mode-textual",level:4},{value:"Depinject <code>app_config.go</code> / <code>app.yml</code>",id:"depinject-app_configgo--appyml",level:3},{value:"Protobuf",id:"protobuf",level:3},{value:"Modules",id:"modules",level:3},{value:"<code>**all**</code>",id:"all",level:4},{value:"Core API",id:"core-api",level:5},{value:"Simulation",id:"simulation",level:5},{value:"Depinject",id:"depinject",level:5},{value:"Params",id:"params",level:5},{value:"Genesis Interface",id:"genesis-interface",level:5},{value:"Migration to Collections",id:"migration-to-collections",level:5},{value:"<code>x/auth</code>",id:"xauth",level:4},{value:"<code>x/accounts</code>",id:"xaccounts",level:4},{value:"TX Decoder",id:"tx-decoder",level:5},{value:"<code>x/crisis</code>",id:"xcrisis",level:4},{value:"<code>x/distribution</code>",id:"xdistribution",level:4},{value:"<code>x/gov</code>",id:"xgov",level:4},{value:"<code>x/mint</code>",id:"xmint",level:4},{value:"<code>x/protocolpool</code>",id:"xprotocolpool",level:4},{value:"<code>x/validate</code>",id:"xvalidate",level:4},{value:"<code>tools/benchmark</code>",id:"toolsbenchmark",level:4}],d={toc:l},c="wrapper";function g(e){let{components:n,...t}=e;return(0,a.yg)(c,(0,o.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"upgrading-cosmos-sdk"},"Upgrading Cosmos SDK"),(0,a.yg)("p",null,"This guide provides instructions for upgrading to specific versions of Cosmos SDK.\nNote, always read the ",(0,a.yg)("strong",{parentName:"p"},"SimApp")," section for more information on application wiring updates."),(0,a.yg)("h2",{id:"v052x"},(0,a.yg)("a",{parentName:"h2",href:"https://github.com/cosmos/cosmos-sdk/releases/tag/v0.52.0-alpha.0"},"v0.52.x")),(0,a.yg)("h3",{id:"simapp"},"SimApp"),(0,a.yg)("p",null,"In this section we describe the changes made in Cosmos SDK' SimApp.\n",(0,a.yg)("strong",{parentName:"p"},"These changes are directly applicable to your application wiring."),"\nPlease read this section first, but for an exhaustive list of changes, refer to the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/release/v0.52.x/simapp/CHANGELOG.md"},"CHANGELOG"),"."),(0,a.yg)("h4",{id:"client-rootgo"},"Client (",(0,a.yg)("inlineCode",{parentName:"h4"},"root.go"),")"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"client")," package has been refactored to make use of the address codecs (address, validator address, consensus address, etc.)\nand address bech32 prefixes (address and validator address).\nThis is part of the work of abstracting the SDK from the global bech32 config."),(0,a.yg)("p",null,"This means the address codecs and prefixes must be provided in the ",(0,a.yg)("inlineCode",{parentName:"p"},"client.Context")," in the application client (usually ",(0,a.yg)("inlineCode",{parentName:"p"},"root.go"),")."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},'clientCtx = clientCtx.\n+ WithAddressCodec(addressCodec).\n+ WithValidatorAddressCodec(validatorAddressCodec).\n+ WithConsensusAddressCodec(consensusAddressCodec).\n+ WithAddressPrefix("cosmos").\n+ WithValidatorPrefix("cosmosvaloper")\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"When using ",(0,a.yg)("inlineCode",{parentName:"strong"},"depinject")," / ",(0,a.yg)("inlineCode",{parentName:"strong"},"app_di"),", the client codecs can be provided directly from application config.")),(0,a.yg)("p",null,"Refer to SimApp ",(0,a.yg)("inlineCode",{parentName:"p"},"root.go")," for an example with an app di and a legacy app."),(0,a.yg)("p",null,"Additionally, a simplification of the start command leads to the following change:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"- server.AddCommands(rootCmd, newApp, func(startCmd *cobra.Command) {})\n+ server.AddCommands(rootCmd, newApp, server.StartCmdOptions[servertypes.Application]{})\n")),(0,a.yg)("h4",{id:"server-appgo"},"Server (",(0,a.yg)("inlineCode",{parentName:"h4"},"app.go"),")"),(0,a.yg)("h5",{id:"module-manager"},"Module Manager"),(0,a.yg)("p",null,"The basic module manager has been deleted. It was not necessary anymore and was simplified to use the ",(0,a.yg)("inlineCode",{parentName:"p"},"module.Manager")," directly.\nIt can be removed from your ",(0,a.yg)("inlineCode",{parentName:"p"},"app.go"),"."),(0,a.yg)("p",null,"For depinject users, it isn't necessary anymore to supply a ",(0,a.yg)("inlineCode",{parentName:"p"},"map[string]module.AppModuleBasic")," for customizing the app module basic instantiation.\nThe custom parameters (such as genutil message validator or gov proposal handler, or evidence handler) can directly be supplied.\nWhen requiring a module manager in ",(0,a.yg)("inlineCode",{parentName:"p"},"root.go"),", inject ",(0,a.yg)("inlineCode",{parentName:"p"},"*module.Manager")," using ",(0,a.yg)("inlineCode",{parentName:"p"},"depinject.Inject"),"."),(0,a.yg)("p",null,"For non depinject users, simply call ",(0,a.yg)("inlineCode",{parentName:"p"},"RegisterLegacyAminoCodec")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"RegisterInterfaces")," on the module manager:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"-app.BasicModuleManager = module.NewBasicManagerFromManager(...)\n-app.BasicModuleManager.RegisterLegacyAminoCodec(legacyAmino)\n-app.BasicModuleManager.RegisterInterfaces(interfaceRegistry)\n+app.ModuleManager.RegisterLegacyAminoCodec(legacyAmino)\n+app.ModuleManager.RegisterInterfaces(interfaceRegistry)\n")),(0,a.yg)("p",null,"Additionally, thanks to the genesis simplification, as explained in ",(0,a.yg)("a",{parentName:"p",href:"#genesis-interface"},"the genesis interface update"),", the module manager ",(0,a.yg)("inlineCode",{parentName:"p"},"InitGenesis")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ExportGenesis")," methods do not require the codec anymore."),(0,a.yg)("h5",{id:"grpc-web"},"gRPC Web"),(0,a.yg)("p",null,"Grpc-web embedded client has been removed from the server. If you would like to use grpc-web, you can use the ",(0,a.yg)("a",{parentName:"p",href:"https://www.envoyproxy.io/docs/envoy/latest/start/start"},"envoy proxy"),". Here's how to set it up:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Step by step guide"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Install Envoy following the ",(0,a.yg)("a",{parentName:"p",href:"https://www.envoyproxy.io/docs/envoy/latest/start/install"},"official installation guide"),".")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Create an Envoy configuration file named ",(0,a.yg)("inlineCode",{parentName:"p"},"envoy.yaml")," with the following content:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},'static_resources:\nlisteners:\n- name: listener_0\n    address:\n    socket_address: { address: 0.0.0.0, port_value: 8080 }\n    filter_chains:\n    - filters:\n    - name: envoy.filters.network.http_connection_manager\n        typed_config:\n        "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n        codec_type: auto\n        stat_prefix: ingress_http\n        route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n            domains: ["*"]\n            routes:\n            - match: { prefix: "/" }\n                route:\n                cluster: grpc_service\n                timeout: 0s\n                max_stream_duration:\n                    grpc_timeout_header_max: 0s\n            cors:\n                allow_origin_string_match:\n                - prefix: "*"\n                allow_methods: GET, PUT, DELETE, POST, OPTIONS\n                allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout\n                max_age: "1728000"\n                expose_headers: custom-header-1,grpc-status,grpc-message\n        http_filters:\n        - name: envoy.filters.http.grpc_web\n            typed_config:\n            "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb\n        - name: envoy.filters.http.cors\n            typed_config:\n            "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors\n        - name: envoy.filters.http.router\n            typed_config:\n            "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\nclusters:\n- name: grpc_service\n    connect_timeout: 0.25s\n    type: logical_dns\n    http2_protocol_options: {}\n    lb_policy: round_robin\n    load_assignment:\n    cluster_name: cluster_0\n    endpoints:\n        - lb_endpoints:\n            - endpoint:\n                address:\n                socket_address:\n                    address: 0.0.0.0\n                    port_value: 9090\n')),(0,a.yg)("p",{parentName:"li"},"This configuration tells Envoy to listen on port 8080 and forward requests to your gRPC service on port 9090. Note that this configuration is a starting point and can be modified according to your specific needs and preferences. You may need to adjust ports, addresses, or add additional settings based on your particular setup and requirements.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Start your Cosmos SDK application, ensuring it's configured to serve gRPC on port 9090.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Start Envoy with the configuration file:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"envoy -c envoy.yaml\n"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"If Envoy starts successfully, you should see output similar to this:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"[2024-08-29 10:47:08.753][6281320][info][config] [source/common/listener_manager/listener_manager_impl.cc:930] all dependencies initialized. starting workers\n[2024-08-29 10:47:08.754][6281320][info][main] [source/server/server.cc:978] starting main dispatch loop\n")),(0,a.yg)("p",{parentName:"li"},"This indicates that Envoy has started and is ready to proxy requests.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Update your client applications to connect to Envoy (http://localhost:8080 by default).")))),(0,a.yg)("p",null,"By following these steps, Envoy will handle the translation between gRPC-Web and gRPC, allowing your existing gRPC-Web clients to continue functioning without modifications to your Cosmos SDK application."),(0,a.yg)("p",null,"To test the setup, you can use a tool like ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/fullstorydev/grpcurl"},"grpcurl"),". For example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"grpcurl -plaintext localhost:8080 cosmos.base.tendermint.v1beta1.Service/GetLatestBlock\n")),(0,a.yg)("h5",{id:"antehandlers"},"AnteHandlers"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"GasConsumptionDecorator")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"IncreaseSequenceDecorator")," have been merged with the SigVerificationDecorator, so you'll\nneed to remove them both from your app.go code, they will yield to unresolvable symbols when compiling."),(0,a.yg)("h4",{id:"unordered-transactions"},"Unordered Transactions"),(0,a.yg)("p",null,"The Cosmos SDK now supports unordered transactions. This means that transactions\ncan be executed in any order and doesn't require the client to deal with or manage\nnonces. This also means the order of execution is not guaranteed."),(0,a.yg)("p",null,"Unordered transactions are automatically enabled when using ",(0,a.yg)("inlineCode",{parentName:"p"},"depinject")," / app di, simply supply the ",(0,a.yg)("inlineCode",{parentName:"p"},"servertypes.AppOptions")," in ",(0,a.yg)("inlineCode",{parentName:"p"},"app.go"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"    depinject.Supply(\n+       // supply the application options\n+       appOpts,\n        // supply the logger\n        logger,\n    )\n")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Step-by-step Wiring "),"If you are still using the legacy wiring, you must enable unordered transactions manually:",(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Update the ",(0,a.yg)("inlineCode",{parentName:"p"},"App")," constructor to create, load, and save the unordered transaction\nmanager."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-go"},'func NewApp(...) *App {\n    // ...\n\n    // create, start, and load the unordered tx manager\n    utxDataDir := filepath.Join(cast.ToString(appOpts.Get(flags.FlagHome)), "data")\n    app.UnorderedTxManager = unorderedtx.NewManager(utxDataDir)\n    app.UnorderedTxManager.Start()\n\n    if err := app.UnorderedTxManager.OnInit(); err != nil {\n        panic(fmt.Errorf("failed to initialize unordered tx manager: %w", err))\n    }\n}\n'))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Add the decorator to the existing AnteHandler chain, which should be as early\nas possible."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-go"},"anteDecorators := []sdk.AnteDecorator{\n    ante.NewSetUpContextDecorator(),\n    // ...\n    ante.NewUnorderedTxDecorator(unorderedtx.DefaultMaxTimeoutDuration, options.TxManager, options.Environment),\n    // ...\n}\n\nreturn sdk.ChainAnteDecorators(anteDecorators...), nil\n"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"If the App has a SnapshotManager defined, you must also register the extension\nfor the TxManager."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-go"},'if manager := app.SnapshotManager(); manager != nil {\n    err := manager.RegisterExtensions(unorderedtx.NewSnapshotter(app.UnorderedTxManager))\n    if err != nil {\n        panic(fmt.Errorf("failed to register snapshot extension: %s", err))\n    }\n}\n'))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Create or update the App's ",(0,a.yg)("inlineCode",{parentName:"p"},"Preblocker()")," method to call the unordered tx\nmanager's ",(0,a.yg)("inlineCode",{parentName:"p"},"OnNewBlock()")," method."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-go"},"...\napp.SetPreblocker(app.PreBlocker)\n...\n\nfunc (app *SimApp) PreBlocker(ctx sdk.Context, req *abci.RequestFinalizeBlock) (*sdk.ResponsePreBlock, error) {\n    app.UnorderedTxManager.OnNewBlock(ctx.BlockTime())\n    return app.ModuleManager.PreBlock(ctx, req)\n}\n"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Create or update the App's ",(0,a.yg)("inlineCode",{parentName:"p"},"Close()")," method to close the unordered tx manager.\nNote, this is critical as it ensures the manager's state is written to file\nsuch that when the node restarts, it can recover the state to provide replay\nprotection."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-go"},"func (app *App) Close() error {\n    // ...\n\n    // close the unordered tx manager\n    if e := app.UnorderedTxManager.Close(); e != nil {\n        err = errors.Join(err, e)\n    }\n\n    return err\n}\n"))))),(0,a.yg)("p",null,"To submit an unordered transaction, the client must set the ",(0,a.yg)("inlineCode",{parentName:"p"},"unordered")," flag to\n",(0,a.yg)("inlineCode",{parentName:"p"},"true")," and ensure a reasonable ",(0,a.yg)("inlineCode",{parentName:"p"},"timeout_height")," is set. The ",(0,a.yg)("inlineCode",{parentName:"p"},"timeout_height")," is\nused as a TTL for the transaction and is used to provide replay protection. See\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-070-unordered-transactions.md"},"ADR-070"),"\nfor more details."),(0,a.yg)("h4",{id:"sign-mode-textual"},"Sign Mode Textual"),(0,a.yg)("p",null,"With the split of ",(0,a.yg)("inlineCode",{parentName:"p"},"x/auth/tx/config")," in two (x/auth/tx/config as depinject module for txconfig and tx options) and ",(0,a.yg)("inlineCode",{parentName:"p"},"x/validate"),", sign mode textual is no more automatically configured when using runtime (it was previously the case).\nFor the same instructions than for legacy app wiring to enable sign mode textual (see in v0.50 UPGRADING documentation)."),(0,a.yg)("h3",{id:"depinject-app_configgo--appyml"},"Depinject ",(0,a.yg)("inlineCode",{parentName:"h3"},"app_config.go")," / ",(0,a.yg)("inlineCode",{parentName:"h3"},"app.yml")),(0,a.yg)("p",null,"With the introduction of ",(0,a.yg)("a",{parentName:"p",href:"#core-api"},"environment in modules"),", depinject automatically creates the environment for all modules.\nThe 'Environment struct provides essential services](",(0,a.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/learn/advanced/core#environment"},"https://docs.cosmos.network/main/learn/advanced/core#environment"),") to modules including logging, event handling, gas metering, header access, routing, and both KV and memory store services. Given the fields of environment, this means runtime creates a kv store service for all modules by default. It can happen that some modules do not have a store necessary (such as ",(0,a.yg)("inlineCode",{parentName:"p"},"x/auth/tx")," for instance). In this case, the store creation should be skipped in ",(0,a.yg)("inlineCode",{parentName:"p"},"app_config.go"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},'InitGenesis: []string{\n    "..."\n},\n+ // SkipStoreKeys is an optional list of store keys to skip when constructing the\n+ // module\'s keeper. This is useful when a module does not have a store key.\n+ SkipStoreKeys: []string{\n+   "tx",\n+ },\n')),(0,a.yg)("h3",{id:"protobuf"},"Protobuf"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"cosmossdk.io/api/tendermint")," package has been removed as CometBFT now publishes its protos to ",(0,a.yg)("inlineCode",{parentName:"p"},"buf.build/tendermint")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"buf.build/cometbft"),".\nThere is no longer a need for the Cosmos SDK to host these protos for itself and its dependencies.\nThat package containing proto v2 generated code, but the SDK now uses ",(0,a.yg)("a",{parentName:"p",href:"https://buf.build/docs/bsr/generated-sdks/go"},"buf generated go SDK instead"),".\nIf you were depending on ",(0,a.yg)("inlineCode",{parentName:"p"},"cosmossdk.io/api/tendermint"),", please use the buf generated go SDK instead, or ask CometBFT host the generated proto v2 code."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"codectypes.Any")," has moved to ",(0,a.yg)("inlineCode",{parentName:"p"},"github.com/cosmos/gogoproto/types/any"),". Module developers need to update the ",(0,a.yg)("inlineCode",{parentName:"p"},"buf.gen.gogo.yaml")," configuration files by adjusting the corresponding ",(0,a.yg)("inlineCode",{parentName:"p"},"opt")," option to ",(0,a.yg)("inlineCode",{parentName:"p"},"Mgoogle/protobuf/any.proto=github.com/cosmos/gogoproto/types/any")," for directly mapping the",(0,a.yg)("inlineCode",{parentName:"p"},"Any")," type to its new location:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"version: v1\nplugins:\n  - name: gocosmos\n    out: ..\n-    opt: plugins=grpc,Mgoogle/protobuf/any.proto=github.com/cosmos/cosmos-sdk/codec/types,Mcosmos/orm/v1/orm.proto=cosmossdk.io/orm\n+    opt: plugins=grpc,Mgoogle/protobuf/any.proto=github.com/cosmos/gogoproto/types/any,Mcosmos/orm/v1/orm.proto=cosmossdk.io/orm\n  - name: grpc-gateway\n    out: ..\n    opt: logtostderr=true,allow_colon_final_segments=true\n\n")),(0,a.yg)("p",null,"Also, any usages of the interfaces ",(0,a.yg)("inlineCode",{parentName:"p"},"AnyUnpacker")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"UnpackInterfacesMessage")," must be replaced with the interfaces of the same name in the ",(0,a.yg)("inlineCode",{parentName:"p"},"github.com/cosmos/gogoproto/types/any")," package."),(0,a.yg)("h3",{id:"modules"},"Modules"),(0,a.yg)("h4",{id:"all"},(0,a.yg)("inlineCode",{parentName:"h4"},"**all**")),(0,a.yg)("p",null,"All modules (expect ",(0,a.yg)("inlineCode",{parentName:"p"},"auth"),") were spun out into their own ",(0,a.yg)("inlineCode",{parentName:"p"},"go.mod"),". Replace their imports by ",(0,a.yg)("inlineCode",{parentName:"p"},"cosmossdk.io/x/{moduleName}"),"."),(0,a.yg)("h5",{id:"core-api"},"Core API"),(0,a.yg)("p",null,"Core API has been introduced for modules since v0.47. With the deprecation of ",(0,a.yg)("inlineCode",{parentName:"p"},"sdk.Context"),", we strongly recommend to use the ",(0,a.yg)("inlineCode",{parentName:"p"},"cosmossdk.io/core/appmodule")," interfaces for the modules. This will allow the modules to work out of the box with baseapp, as well as limit their dependencies on the SDK."),(0,a.yg)("p",null,"Additionally, the ",(0,a.yg)("inlineCode",{parentName:"p"},"appmodule.Environment")," struct is introduced to fetch different services from the application.\nThis should be used as an alternative to using ",(0,a.yg)("inlineCode",{parentName:"p"},"sdk.UnwrapContext(ctx)")," to fetch the services.\nIt needs to be passed into a module at instantiation (or depinject will inject the correct environment)."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"x/circuit")," is used as an example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'app.CircuitKeeper = circuitkeeper.NewKeeper(runtime.NewEnvironment(runtime.NewKVStoreService(keys[circuittypes.StoreKey]), logger.With(log.ModuleKey, "x/circuit")), appCodec, authtypes.NewModuleAddress(govtypes.ModuleName).String(), app.AuthKeeper.AddressCodec())\n')),(0,a.yg)("p",null,"If your module requires a message server or query server, it should be passed in the environment as well."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},'-govKeeper := govkeeper.NewKeeper(appCodec, runtime.NewKVStoreService(keys[govtypes.StoreKey]), app.AuthKeeper, app.BankKeeper,app.StakingKeeper, app.PoolKeeper, app.MsgServiceRouter(), govConfig, authtypes.NewModuleAddress(govtypes.ModuleName).String())\n+govKeeper := govkeeper.NewKeeper(appCodec, runtime.NewEnvironment(runtime.NewKVStoreService(keys[govtypes.StoreKey]), logger.With(log.ModuleKey, "x/circuit"), runtime.EnvWithMsgRouterService(app.MsgServiceRouter()), runtime.EnvWithQueryRouterService(app.GRPCQueryRouter())), app.AuthKeeper, app.BankKeeper, app.StakingKeeper, app.PoolKeeper, govConfig, authtypes.NewModuleAddress(govtypes.ModuleName).String())\n')),(0,a.yg)("p",null,"The signature of the extension interface ",(0,a.yg)("inlineCode",{parentName:"p"},"HasRegisterInterfaces")," has been changed to accept a ",(0,a.yg)("inlineCode",{parentName:"p"},"cosmossdk.io/core/registry.InterfaceRegistrar")," instead of a ",(0,a.yg)("inlineCode",{parentName:"p"},"codec.InterfaceRegistry"),".   ",(0,a.yg)("inlineCode",{parentName:"p"},"HasRegisterInterfaces")," is now a part of ",(0,a.yg)("inlineCode",{parentName:"p"},"cosmossdk.io/core/appmodule"),".  Modules should update their ",(0,a.yg)("inlineCode",{parentName:"p"},"HasRegisterInterfaces")," implementation to accept a ",(0,a.yg)("inlineCode",{parentName:"p"},"cosmossdk.io/core/registry.InterfaceRegistrar")," interface."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"-func (AppModule) RegisterInterfaces(registry codectypes.InterfaceRegistry) {\n+func (AppModule) RegisterInterfaces(registry registry.InterfaceRegistrar) {\n")),(0,a.yg)("p",null,"The signature of the extension interface ",(0,a.yg)("inlineCode",{parentName:"p"},"HasAminoCodec")," has been changed to accept a ",(0,a.yg)("inlineCode",{parentName:"p"},"cosmossdk.io/core/registry.AminoRegistrar")," instead of a ",(0,a.yg)("inlineCode",{parentName:"p"},"codec.LegacyAmino"),". Modules should update their ",(0,a.yg)("inlineCode",{parentName:"p"},"HasAminoCodec")," implementation to accept a ",(0,a.yg)("inlineCode",{parentName:"p"},"cosmossdk.io/core/registry.AminoRegistrar")," interface."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"-func (AppModule) RegisterLegacyAminoCodec(cdc *codec.LegacyAmino) {\n+func (AppModule) RegisterLegacyAminoCodec(registrar registry.AminoRegistrar) {\n")),(0,a.yg)("h5",{id:"simulation"},"Simulation"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"MsgSimulatorFn")," has been updated to return an error. Its context argument has been removed, and an address.Codec has\nbeen added to avoid the use of the Accounts.String() method."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"-type MsgSimulatorFn func(r *rand.Rand, ctx sdk.Context, accs []Account) sdk.Msg\n+type MsgSimulatorFn func(r *rand.Rand, accs []Account, cdc address.Codec) (sdk.Msg, error)\n")),(0,a.yg)("p",null,"The interface ",(0,a.yg)("inlineCode",{parentName:"p"},"HasProposalMsgs")," has been renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"HasLegacyProposalMsgs"),", as we've introduced a new simulation framework, simpler and easier to use, named ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/simsx/README.md"},"simsx"),"."),(0,a.yg)("h5",{id:"depinject"},"Depinject"),(0,a.yg)("p",null,"Previously ",(0,a.yg)("inlineCode",{parentName:"p"},"cosmossdk.io/core")," held functions ",(0,a.yg)("inlineCode",{parentName:"p"},"Invoke"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"Provide")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"Register")," were moved to ",(0,a.yg)("inlineCode",{parentName:"p"},"cosmossdk.io/depinject/appconfig"),".\nAll modules using dependency injection must update their imports."),(0,a.yg)("h5",{id:"params"},"Params"),(0,a.yg)("p",null,"Previous module migrations have been removed. It is required to migrate to v0.50 prior to upgrading to v0.52 for not missing any module migrations."),(0,a.yg)("h5",{id:"genesis-interface"},"Genesis Interface"),(0,a.yg)("p",null,"All genesis interfaces have been migrated to take ",(0,a.yg)("inlineCode",{parentName:"p"},"context.Context")," instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"sdk.Context"),".\nSecondly, the codec is no longer passed in by the framework. The codec is now passed in by the module.\nLastly, all InitGenesis and ExportGenesis functions now return an error."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},"// InitGenesis performs genesis initialization for the module.\nfunc (am AppModule) InitGenesis(ctx context.Context, data json.RawMessage) error {\n}\n\n// ExportGenesis returns the exported genesis state as raw bytes for the module.\nfunc (am AppModule) ExportGenesis(ctx context.Context) (json.RawMessage, error) {\n}\n")),(0,a.yg)("h5",{id:"migration-to-collections"},"Migration to Collections"),(0,a.yg)("p",null,"Most of Cosmos SDK modules have migrated to ",(0,a.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/build/packages/collections"},"collections"),".\nMany functions have been removed due to this changes as the API can be smaller thanks to collections.\nFor modules that have migrated, verify you are checking against ",(0,a.yg)("inlineCode",{parentName:"p"},"collections.ErrNotFound")," when applicable."),(0,a.yg)("h4",{id:"xauth"},(0,a.yg)("inlineCode",{parentName:"h4"},"x/auth")),(0,a.yg)("p",null,"Vesting accounts messages (and CLIs) have been removed. Existing vesting accounts will keep working but no new vesting accounts can be created.\nUse ",(0,a.yg)("inlineCode",{parentName:"p"},"x/accounts")," lockup accounts or implement an ",(0,a.yg)("inlineCode",{parentName:"p"},"x/accounts")," vesting account instead."),(0,a.yg)("h4",{id:"xaccounts"},(0,a.yg)("inlineCode",{parentName:"h4"},"x/accounts")),(0,a.yg)("p",null,"Accounts's AccountNumber will be used as a global account number tracking replacing Auth legacy AccountNumber. Must set accounts's AccountNumber with auth's AccountNumber value in upgrade handler. This is done through auth keeper MigrateAccountNumber function."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'import authkeeper "github.com/cosmos/cosmos-sdk/x/auth/keeper"\n...\napp.UpgradeKeeper.SetUpgradeHandler(planName,\n    func(ctx context.Context, _ upgradetypes.Plan, fromVM appmodule.VersionMap) (appmodule.VersionMap, error) {\n        if err := authkeeper.MigrateAccountNumberUnsafe(ctx, &app.AuthKeeper); err != nil {\n            return nil, err\n        }\n        return app.ModuleManager.RunMigrations(ctx, app.configurator, fromVM)\n    },\n)\n')),(0,a.yg)("p",null,"Add ",(0,a.yg)("inlineCode",{parentName:"p"},"x/accounts")," store while upgrading to v0.52.x:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},"storetypes.StoreUpgrades{\n    Added: []string{\n        accounts.StoreKey,\n    },\n}\n")),(0,a.yg)("h5",{id:"tx-decoder"},"TX Decoder"),(0,a.yg)("p",null,"In order to support x/accounts properly we need to init a ",(0,a.yg)("inlineCode",{parentName:"p"},"TxDecoder"),", modify your ",(0,a.yg)("inlineCode",{parentName:"p"},"app.go"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},'import (\n+   txdecode "cosmossdk.io/x/tx/decode"\n)\n+   txDecoder, err := txdecode.NewDecoder(txdecode.Options{\n+       SigningContext: signingCtx,\n+       ProtoCodec:     appCodec,\n+   })\n+   if err != nil {\n+       panic(err)\n+   }\n')),(0,a.yg)("h4",{id:"xcrisis"},(0,a.yg)("inlineCode",{parentName:"h4"},"x/crisis")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"x/crisis")," module was removed due to it not being supported or functional any longer."),(0,a.yg)("h4",{id:"xdistribution"},(0,a.yg)("inlineCode",{parentName:"h4"},"x/distribution")),(0,a.yg)("p",null,"Existing chains using ",(0,a.yg)("inlineCode",{parentName:"p"},"x/distribution")," module must add the new ",(0,a.yg)("inlineCode",{parentName:"p"},"x/protocolpool")," module."),(0,a.yg)("h4",{id:"xgov"},(0,a.yg)("inlineCode",{parentName:"h4"},"x/gov")),(0,a.yg)("p",null,"Gov v1beta1 proposal handler has been changed to take in a ",(0,a.yg)("inlineCode",{parentName:"p"},"context.Context")," instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"sdk.Context"),"."),(0,a.yg)("h4",{id:"xmint"},(0,a.yg)("inlineCode",{parentName:"h4"},"x/mint")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"x/mint")," module has been updated to work with a mint function ",(0,a.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/v0.52/build/modules/mint#mintfn"},(0,a.yg)("inlineCode",{parentName:"a"},"MintFn")),"."),(0,a.yg)("p",null,"When using the default inflation calculation function and runtime, no change is required. The depinject configuration of mint automatically sets it if none is provided. However, when not using runtime, the mint function must be set in on the mint keeper:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"+ mintKeeper.SetMintFn(keeper.DefaultMintFn(types.DefaultInflationCalculationFn, stakingKeeper, mintKeeper))\n")),(0,a.yg)("h4",{id:"xprotocolpool"},(0,a.yg)("inlineCode",{parentName:"h4"},"x/protocolpool")),(0,a.yg)("p",null,"Introducing a new ",(0,a.yg)("inlineCode",{parentName:"p"},"x/protocolpool")," module to handle community pool funds. Its store must be added while upgrading to v0.52.x."),(0,a.yg)("p",null,"Example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},"func (app SimApp) RegisterUpgradeHandlers() {\n    app.UpgradeKeeper.SetUpgradeHandler(\n        UpgradeName,\n        func(ctx sdk.Context, _ upgradetypes.Plan, fromVM module.VersionMap) (module.VersionMap, error) {\n            return app.ModuleManager.RunMigrations(ctx, app.Configurator(), fromVM)\n        },\n    )\n\n  // ...\n}\n")),(0,a.yg)("p",null,"Add ",(0,a.yg)("inlineCode",{parentName:"p"},"x/protocolpool")," store while upgrading to v0.52.x:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},"storetypes.StoreUpgrades{\n            Added: []string{\n                protocolpooltypes.ModuleName,\n            },\n}\n")),(0,a.yg)("h4",{id:"xvalidate"},(0,a.yg)("inlineCode",{parentName:"h4"},"x/validate")),(0,a.yg)("p",null,"Introducing ",(0,a.yg)("inlineCode",{parentName:"p"},"x/validate")," a module that is solely used for registering default ante/post handlers and global tx validators when using runtime. If you wish to set your custom ante/post handlers, no need to use this module.\nYou can however always extend them by adding extra tx validators (see ",(0,a.yg)("inlineCode",{parentName:"p"},"x/validate")," documentation)."),(0,a.yg)("h4",{id:"toolsbenchmark"},(0,a.yg)("inlineCode",{parentName:"h4"},"tools/benchmark")),(0,a.yg)("p",null,"Introducing ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/tree/main/tools/benchmark"},(0,a.yg)("inlineCode",{parentName:"a"},"tools/benchmark"))," a Cosmos SDK module for benchmarking your chain. It is a standalone module that can be added to your chain to stress test it. This module should NOT be added in a production environment."))}g.isMDXComponent=!0}}]);