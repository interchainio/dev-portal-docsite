"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[93750],{15680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>c});var o=a(96540);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,o)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,o,t=function(e,n){if(null==e)return{};var a,o,t={},i=Object.keys(e);for(o=0;o<i.length;o++)a=i[o],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)a=i[o],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=o.createContext({}),p=function(e){var n=o.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},m=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(a),u=t,c=d["".concat(s,".").concat(u)]||d[u]||g[u]||i;return a?o.createElement(c,r(r({ref:n},m),{},{components:a})):o.createElement(c,r({ref:n},m))}));function c(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,r=new Array(i);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:t,r[1]=l;for(var p=2;p<i;p++)r[p]=a[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,a)}u.displayName="MDXCreateElement"},72867:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=a(58168),t=(a(96540),a(15680));const i={sidebar_position:1},r="Client/v2",l={unversionedId:"learn/advanced/autocli",id:"version-0.52/learn/advanced/autocli",title:"Client/v2",description:"AutoCLI",source:"@site/cosmos-sdk_versioned_docs/version-0.52/learn/advanced/17-autocli.md",sourceDirName:"learn/advanced",slug:"/learn/advanced/autocli",permalink:"/dev-portal-docsite/cosmos-sdk/learn/advanced/autocli",draft:!1,tags:[],version:"0.52",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"learnSidebar",previous:{title:"Configuration",permalink:"/dev-portal-docsite/cosmos-sdk/learn/advanced/config"},next:{title:"Context",permalink:"/dev-portal-docsite/cosmos-sdk/learn/advanced/context"}},s={},p=[{value:"AutoCLI",id:"autocli",level:2},{value:"Overview",id:"overview",level:3},{value:"Application Wiring",id:"application-wiring",level:3},{value:"Keyring",id:"keyring",level:4},{value:"Signing",id:"signing",level:3},{value:"Module wiring &amp; Customization",id:"module-wiring--customization",level:3},{value:"Specifying Subcommands",id:"specifying-subcommands",level:4},{value:"Positional Arguments",id:"positional-arguments",level:4},{value:"Flattened Fields in Positional Arguments",id:"flattened-fields-in-positional-arguments",level:4},{value:"Customising Flag Names",id:"customising-flag-names",level:4},{value:"Combining AutoCLI with Other Commands Within A Module",id:"combining-autocli-with-other-commands-within-a-module",level:4},{value:"Skip a command",id:"skip-a-command",level:4},{value:"Use AutoCLI for non module commands",id:"use-autocli-for-non-module-commands",level:4},{value:"Conventions for the <code>Use</code> field in Cobra",id:"conventions-for-the-use-field-in-cobra",level:4},{value:"Summary",id:"summary",level:3},{value:"Sign a file",id:"sign-a-file",level:2},{value:"Verify a file",id:"verify-a-file",level:2}],m={toc:p},d="wrapper";function g(e){let{components:n,...a}=e;return(0,t.yg)(d,(0,o.A)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"clientv2"},"Client/v2"),(0,t.yg)("h2",{id:"autocli"},"AutoCLI"),(0,t.yg)("admonition",{title:"Synopsis",type:"note"},(0,t.yg)("p",{parentName:"admonition"},"This document details how to build CLI and REST interfaces for a module. Examples from various Cosmos SDK modules are included.")),(0,t.yg)("admonition",{title:"Pre-requisite Readings",type:"note"},(0,t.yg)("ul",{parentName:"admonition"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://docs.cosmos.network/main/core/cli"},"CLI")))),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"autocli")," (also known as ",(0,t.yg)("inlineCode",{parentName:"p"},"client/v2/autocli"),") package is a ",(0,t.yg)("a",{parentName:"p",href:"https://pkg.go.dev/cosmossdk.io/client/v2/autocli"},"Go library")," for generating CLI (command line interface) interfaces for Cosmos SDK-based applications. It provides a simple way to add CLI commands to your application by generating them automatically based on your gRPC service definitions. Autocli generates CLI commands and flags directly from your protobuf messages, including options, input parameters, and output parameters. This means that you can easily add a CLI interface to your application without having to manually create and manage commands."),(0,t.yg)("h3",{id:"overview"},"Overview"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"autocli")," generates CLI commands and flags for each method defined in your gRPC service. By default, it generates commands for each gRPC services. The commands are named based on the name of the service method."),(0,t.yg)("p",null,"For example, given the following protobuf definition for a service:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-protobuf"},"service MyService {\n  rpc MyMethod(MyRequest) returns (MyResponse) {}\n}\n")),(0,t.yg)("p",null,"For instance, ",(0,t.yg)("inlineCode",{parentName:"p"},"autocli")," would generate a command named ",(0,t.yg)("inlineCode",{parentName:"p"},"my-method")," for the ",(0,t.yg)("inlineCode",{parentName:"p"},"MyMethod")," method. The command will have flags for each field in the ",(0,t.yg)("inlineCode",{parentName:"p"},"MyRequest")," message."),(0,t.yg)("p",null,"It is possible to customize the generation of transactions and queries by defining options for each service."),(0,t.yg)("h3",{id:"application-wiring"},"Application Wiring"),(0,t.yg)("p",null,"Here are the steps to use AutoCLI:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},"Ensure your app's modules implements the ",(0,t.yg)("inlineCode",{parentName:"li"},"appmodule.AppModule")," interface."),(0,t.yg)("li",{parentName:"ol"},"(optional) Configure how to behave as ",(0,t.yg)("inlineCode",{parentName:"li"},"autocli")," command generation, by implementing the ",(0,t.yg)("inlineCode",{parentName:"li"},"func (am AppModule) AutoCLIOptions() *autocliv1.ModuleOptions")," method on the module."),(0,t.yg)("li",{parentName:"ol"},"Use the ",(0,t.yg)("inlineCode",{parentName:"li"},"autocli.AppOptions")," struct to specify the modules you defined. If you are using ",(0,t.yg)("inlineCode",{parentName:"li"},"depinject"),", it can automatically create an instance of ",(0,t.yg)("inlineCode",{parentName:"li"},"autocli.AppOptions")," based on your app's configuration."),(0,t.yg)("li",{parentName:"ol"},"Use the ",(0,t.yg)("inlineCode",{parentName:"li"},"EnhanceRootCommand()")," method provided by ",(0,t.yg)("inlineCode",{parentName:"li"},"autocli")," to add the CLI commands for the specified modules to your root command.")),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("p",{parentName:"admonition"},"AutoCLI is additive only, meaning ",(0,t.yg)("em",{parentName:"p"},"enhancing")," the root command will only add subcommands that are not already registered. This means that you can use AutoCLI alongside other custom commands within your app.")),(0,t.yg)("p",null,"Here's an example of how to use ",(0,t.yg)("inlineCode",{parentName:"p"},"autocli")," in your app:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'// Define your app\'s modules\ntestModules := map[string]appmodule.AppModule{\n    "testModule": &TestModule{},\n}\n\n// Define the autocli AppOptions\nautoCliOpts := autocli.AppOptions{\n    Modules: testModules,\n}\n\n// Create the root command\nrootCmd := &cobra.Command{\n    Use: "app",\n}\n\nif err := appOptions.EnhanceRootCommand(rootCmd); err != nil {\n    return err\n}\n\n// Run the root command\nif err := rootCmd.Execute(); err != nil {\n    return err\n}\n')),(0,t.yg)("h4",{id:"keyring"},"Keyring"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"autocli")," uses a keyring for key name resolving names and signing transactions."),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("p",{parentName:"admonition"},"AutoCLI provides a better UX than normal CLI as it allows to resolve key names directly from the keyring in all transactions and commands."),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",{parentName:"pre",className:"language-sh"},"<appd> q bank balances alice\n<appd> tx bank send alice bob 1000denom\n"))),(0,t.yg)("p",null,"The keyring used for resolving names and signing transactions is provided via the ",(0,t.yg)("inlineCode",{parentName:"p"},"client.Context"),".\nThe keyring is then converted to the ",(0,t.yg)("inlineCode",{parentName:"p"},"client/v2/autocli/keyring")," interface.\nIf no keyring is provided, the ",(0,t.yg)("inlineCode",{parentName:"p"},"autocli")," generated command will not be able to sign transactions, but will still be able to query the chain."),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("p",{parentName:"admonition"},"The Cosmos SDK keyring and Hubl keyring both implement the ",(0,t.yg)("inlineCode",{parentName:"p"},"client/v2/autocli/keyring")," interface, thanks to the following wrapper:"),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",{parentName:"pre",className:"language-go"},"keyring.NewAutoCLIKeyring(kb)\n"))),(0,t.yg)("h3",{id:"signing"},"Signing"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"autocli")," supports signing transactions with the keyring.\nThe ",(0,t.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/build/building-modules/protobuf-annotations"},(0,t.yg)("inlineCode",{parentName:"a"},"cosmos.msg.v1.signer")," protobuf annotation")," defines the signer field of the message.\nThis field is automatically filled when using the ",(0,t.yg)("inlineCode",{parentName:"p"},"--from")," flag or defining the signer as a positional argument."),(0,t.yg)("admonition",{type:"warning"},(0,t.yg)("p",{parentName:"admonition"},"AutoCLI currently supports only one signer per transaction.")),(0,t.yg)("h3",{id:"module-wiring--customization"},"Module wiring & Customization"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"AutoCLIOptions()")," method on your module allows to specify custom commands, sub-commands or flags for each service, as it was a ",(0,t.yg)("inlineCode",{parentName:"p"},"cobra.Command")," instance, within the ",(0,t.yg)("inlineCode",{parentName:"p"},"RpcCommandOptions")," struct. Defining such options will customize the behavior of the ",(0,t.yg)("inlineCode",{parentName:"p"},"autocli")," command generation, which by default generates a command for each method in your gRPC service."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'*autocliv1.RpcCommandOptions{\n  RpcMethod: "Params", // The name of the gRPC service\n  Use:       "params", // Command usage that is displayed in the help\n  Short:     "Query the parameters of the governance process", // Short description of the command\n  Long:      "Query the parameters of the governance process. Specify specific param types (voting|tallying|deposit) to filter results.", // Long description of the command\n  PositionalArgs: []*autocliv1.PositionalArgDescriptor{\n    {ProtoField: "params_type", Optional: true}, // Transform a flag into a positional argument\n  },\n}\n')),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("p",{parentName:"admonition"},"AutoCLI can create a gov proposal of any tx by simply setting the ",(0,t.yg)("inlineCode",{parentName:"p"},"GovProposal")," field to ",(0,t.yg)("inlineCode",{parentName:"p"},"true")," in the ",(0,t.yg)("inlineCode",{parentName:"p"},"autocli.RpcCommandOptions")," struct.\nUsers can however use the ",(0,t.yg)("inlineCode",{parentName:"p"},"--no-proposal")," flag to disable the proposal creation (which is useful if the authority isn't the gov module on a chain).")),(0,t.yg)("h4",{id:"specifying-subcommands"},"Specifying Subcommands"),(0,t.yg)("p",null,"By default, ",(0,t.yg)("inlineCode",{parentName:"p"},"autocli")," generates a command for each method in your gRPC service. However, you can specify subcommands to group related commands together. To specify subcommands, use the ",(0,t.yg)("inlineCode",{parentName:"p"},"autocliv1.ServiceCommandDescriptor")," struct."),(0,t.yg)("p",null,"This example shows how to use the ",(0,t.yg)("inlineCode",{parentName:"p"},"autocliv1.ServiceCommandDescriptor")," struct to group related commands together and specify subcommands in your gRPC service by defining an instance of ",(0,t.yg)("inlineCode",{parentName:"p"},"autocliv1.ModuleOptions")," in your ",(0,t.yg)("inlineCode",{parentName:"p"},"autocli.go"),"."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-beta.0/x/gov/autocli.go#L94-L97\n")),(0,t.yg)("h4",{id:"positional-arguments"},"Positional Arguments"),(0,t.yg)("p",null,"By default ",(0,t.yg)("inlineCode",{parentName:"p"},"autocli")," generates a flag for each field in your protobuf message. However, you can choose to use positional arguments instead of flags for certain fields."),(0,t.yg)("p",null,"To add positional arguments to a command, use the ",(0,t.yg)("inlineCode",{parentName:"p"},"autocliv1.PositionalArgDescriptor")," struct, as seen in the example below. Specify the ",(0,t.yg)("inlineCode",{parentName:"p"},"ProtoField")," parameter, which is the name of the protobuf field that should be used as the positional argument. In addition, if the parameter is a variable-length argument, you can specify the ",(0,t.yg)("inlineCode",{parentName:"p"},"Varargs")," parameter as ",(0,t.yg)("inlineCode",{parentName:"p"},"true"),". This can only be applied to the last positional parameter, and the ",(0,t.yg)("inlineCode",{parentName:"p"},"ProtoField")," must be a repeated field."),(0,t.yg)("p",null,"Here's an example of how to define a positional argument for the ",(0,t.yg)("inlineCode",{parentName:"p"},"Account")," method of the ",(0,t.yg)("inlineCode",{parentName:"p"},"auth")," service:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-beta.0/x/auth/autocli.go#L25-L30\n")),(0,t.yg)("p",null,"Then the command can be used as follows, instead of having to specify the ",(0,t.yg)("inlineCode",{parentName:"p"},"--address")," flag:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"<appd> query auth account cosmos1abcd...xyz\n")),(0,t.yg)("h4",{id:"flattened-fields-in-positional-arguments"},"Flattened Fields in Positional Arguments"),(0,t.yg)("p",null,"AutoCLI also supports flattening nested message fields as positional arguments. This means you can access nested fields\nusing dot notation in the ",(0,t.yg)("inlineCode",{parentName:"p"},"ProtoField")," parameter. This is particularly useful when you want to directly set nested\nmessage fields as positional arguments."),(0,t.yg)("p",null,"For example, if you have a nested message structure like this:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-protobuf"},"message Permissions {\n    string level = 1;\n    repeated string limit_type_urls = 2;\n}\n\nmessage MsgAuthorizeCircuitBreaker {\n    string grantee = 1;\n    Permissions permissions = 2;\n}\n")),(0,t.yg)("p",null,"You can flatten the fields in your AutoCLI configuration:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'{\n    RpcMethod: "AuthorizeCircuitBreaker",\n    Use:       "authorize <grantee> <level> <msg_type_urls>",\n    PositionalArgs: []*autocliv1.PositionalArgDescriptor{\n        {ProtoField: "grantee"},\n        {ProtoField: "permissions.level"},\n        {ProtoField: "permissions.limit_type_urls"},\n    },\n}\n')),(0,t.yg)("p",null,"This allows users to provide values for nested fields directly as positional arguments:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},'<appd> tx circuit authorize cosmos1... super-admin "/cosmos.bank.v1beta1.MsgSend,/cosmos.bank.v1beta1.MsgMultiSend"\n')),(0,t.yg)("p",null,"Instead of having to provide a complex JSON structure for nested fields, flattening makes the CLI more user-friendly by allowing direct access to nested fields."),(0,t.yg)("h4",{id:"customising-flag-names"},"Customising Flag Names"),(0,t.yg)("p",null,"By default, ",(0,t.yg)("inlineCode",{parentName:"p"},"autocli")," generates flag names based on the names of the fields in your protobuf message. However, you can customise the flag names by providing a ",(0,t.yg)("inlineCode",{parentName:"p"},"FlagOptions"),". This parameter allows you to specify custom names for flags based on the names of the message fields."),(0,t.yg)("p",null,"For example, if you have a message with the fields ",(0,t.yg)("inlineCode",{parentName:"p"},"test")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"test1"),", you can use the following naming options to customise the flags:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'autocliv1.RpcCommandOptions{ \n    FlagOptions: map[string]*autocliv1.FlagOptions{ \n        "test": { Name: "custom_name", }, \n        "test1": { Name: "other_name", }, \n    }, \n}\n')),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"FlagsOptions")," is defined like sub commands in the ",(0,t.yg)("inlineCode",{parentName:"p"},"AutoCLIOptions()")," method on your module."),(0,t.yg)("h4",{id:"combining-autocli-with-other-commands-within-a-module"},"Combining AutoCLI with Other Commands Within A Module"),(0,t.yg)("p",null,"AutoCLI can be used alongside other commands within a module. For example, the ",(0,t.yg)("inlineCode",{parentName:"p"},"gov")," module uses AutoCLI to generate commands for the ",(0,t.yg)("inlineCode",{parentName:"p"},"query")," subcommand, but also defines custom commands for the ",(0,t.yg)("inlineCode",{parentName:"p"},"proposer")," subcommands."),(0,t.yg)("p",null,"In order to enable this behavior, set in ",(0,t.yg)("inlineCode",{parentName:"p"},"AutoCLIOptions()")," the ",(0,t.yg)("inlineCode",{parentName:"p"},"EnhanceCustomCommand")," field to ",(0,t.yg)("inlineCode",{parentName:"p"},"true"),", for the command type (queries and/or transactions) you want to enhance."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/fa4d87ef7e6d87aaccc94c337ffd2fe90fcb7a9d/x/gov/autocli.go#L98\n")),(0,t.yg)("p",null,"If not set to true, ",(0,t.yg)("inlineCode",{parentName:"p"},"AutoCLI")," will not generate commands for the module if there are already commands registered for the module (when ",(0,t.yg)("inlineCode",{parentName:"p"},"GetTxCmd()")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"GetQueryCmd()")," are defined)."),(0,t.yg)("h4",{id:"skip-a-command"},"Skip a command"),(0,t.yg)("p",null,"AutoCLI automatically skips unsupported commands when ",(0,t.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/build/building-modules/protobuf-annotations"},(0,t.yg)("inlineCode",{parentName:"a"},"cosmos_proto.method_added_in")," protobuf annotation")," is present."),(0,t.yg)("p",null,"Additionally, a command can be manually skipped using the ",(0,t.yg)("inlineCode",{parentName:"p"},"autocliv1.RpcCommandOptions"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},'*autocliv1.RpcCommandOptions{\n  RpcMethod: "Params", // The name of the gRPC service\n  Skip: true,\n}\n')),(0,t.yg)("h4",{id:"use-autocli-for-non-module-commands"},"Use AutoCLI for non module commands"),(0,t.yg)("p",null,"It is possible to use ",(0,t.yg)("inlineCode",{parentName:"p"},"AutoCLI")," for non module commands. The trick is still to implement the ",(0,t.yg)("inlineCode",{parentName:"p"},"appmodule.Module")," interface and append it to the ",(0,t.yg)("inlineCode",{parentName:"p"},"appOptions.ModuleOptions")," map."),(0,t.yg)("p",null,"For example, here is how the SDK does it for ",(0,t.yg)("inlineCode",{parentName:"p"},"cometbft")," gRPC commands:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/release/v0.52.x/client/grpc/cmtservice/autocli.go#L52-L71\n")),(0,t.yg)("h4",{id:"conventions-for-the-use-field-in-cobra"},"Conventions for the ",(0,t.yg)("inlineCode",{parentName:"h4"},"Use")," field in Cobra"),(0,t.yg)("p",null,"According to the ",(0,t.yg)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/spf13/cobra#Command"},"Cobra documentation")," the following conventions should be followed for the ",(0,t.yg)("inlineCode",{parentName:"p"},"Use")," field in Cobra commands:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Required arguments"),":"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Should not be enclosed in brackets. They can be enclosed in angle brackets ",(0,t.yg)("inlineCode",{parentName:"li"},"< >")," for clarity."),(0,t.yg)("li",{parentName:"ul"},"Example: ",(0,t.yg)("inlineCode",{parentName:"li"},"command <required_argument>")))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Optional arguments"),":"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Should be enclosed in square brackets ",(0,t.yg)("inlineCode",{parentName:"li"},"[ ]"),"."),(0,t.yg)("li",{parentName:"ul"},"Example: ",(0,t.yg)("inlineCode",{parentName:"li"},"command [optional_argument]")))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Alternative (mutually exclusive) arguments"),":"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Should be enclosed in curly braces ",(0,t.yg)("inlineCode",{parentName:"li"},"{ }"),"."),(0,t.yg)("li",{parentName:"ul"},"Example: ",(0,t.yg)("inlineCode",{parentName:"li"},"command {-a | -b}")," for required alternatives."),(0,t.yg)("li",{parentName:"ul"},"Example: ",(0,t.yg)("inlineCode",{parentName:"li"},"command [-a | -b]")," for optional alternatives."))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Multiple arguments"),":"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Indicated with ",(0,t.yg)("inlineCode",{parentName:"li"},"...")," after the argument."),(0,t.yg)("li",{parentName:"ul"},"Example: ",(0,t.yg)("inlineCode",{parentName:"li"},"command argument...")))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Combination of options"),":"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Example: ",(0,t.yg)("inlineCode",{parentName:"li"},"command [-F file | -D dir]... [-f format] profile"))))),(0,t.yg)("h3",{id:"summary"},"Summary"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"autocli")," lets you generate CLI to your Cosmos SDK-based applications without any cobra boilerplate. It allows you to easily generate CLI commands and flags from your protobuf messages, and provides many options for customising the behavior of your CLI application."),(0,t.yg)("p",null,"To further enhance your CLI experience with Cosmos SDK-based blockchains, you can use ",(0,t.yg)("inlineCode",{parentName:"p"},"hubl"),". ",(0,t.yg)("inlineCode",{parentName:"p"},"hubl")," is a tool that allows you to query any Cosmos SDK-based blockchain using the new AutoCLI feature of the Cosmos SDK. With ",(0,t.yg)("inlineCode",{parentName:"p"},"hubl"),", you can easily configure a new chain and query modules with just a few simple commands."),(0,t.yg)("p",null,"For more information on ",(0,t.yg)("inlineCode",{parentName:"p"},"hubl"),", including how to configure a new chain and query a module, see the ",(0,t.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/build/tooling/hubl"},"Hubl documentation"),"."),(0,t.yg)("h1",{id:"off-chain"},"Off-Chain"),(0,t.yg)("p",null,"Off-chain is a ",(0,t.yg)("inlineCode",{parentName:"p"},"client/v2")," package providing functionalities for allowing to sign and verify files with two commands:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"sign-file")," for signing a file."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"verify-file")," for verifying a previously signed file.")),(0,t.yg)("p",null,"Signing a file will result in a Tx with a ",(0,t.yg)("inlineCode",{parentName:"p"},"MsgSignArbitraryData")," as described in the ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cips/blob/main/cips/cip-X.md"},"Off-chain CIP"),"."),(0,t.yg)("h2",{id:"sign-a-file"},"Sign a file"),(0,t.yg)("p",null,"To sign a file ",(0,t.yg)("inlineCode",{parentName:"p"},"sign-file")," command offers some helpful flags:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-text"},'      --encoding string          Choose an encoding method for the file content to be added as msg data (no-encoding|base64|hex) (default "no-encoding")\n      --indent string            Choose an indent for the tx (default "  ")\n      --notEmitUnpopulated       Don\'t show unpopulated fields in the tx\n      --output string            Choose an output format for the tx (json|text (default "json")\n      --output-document string   The document will be written to the given file instead of STDOUT\n')),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"encoding")," flag lets you choose how the contents of the file should be encoded. For example:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"p"},"simd off-chain sign-file alice myFile.json")),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-json"},' {\n   "@type":  "/offchain.MsgSignArbitraryData",\n   "appDomain":  "simd",\n   "signer":  "cosmos1x33fy6rusfprkntvjsfregss7rvsvyy4lkwrqu",\n   "data":  "Hello World!\\n"\n }\n\n'))))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"p"},"simd off-chain sign-file alice myFile.json --encoding base64")),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-json"},' {\n   "@type":  "/offchain.MsgSignArbitraryData",\n   "appDomain":  "simd",\n   "signer":  "cosmos1x33fy6rusfprkntvjsfregss7rvsvyy4lkwrqu",\n   "data":  "SGVsbG8gV29ybGQhCg=="\n }\n\n'))))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"p"},"simd off-chain sign-file alice myFile.json --encoding hex")),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-json"},'  {\n    "@type":  "/offchain.MsgSignArbitraryData",\n    "appDomain":  "simd",\n    "signer":  "cosmos1x33fy6rusfprkntvjsfregss7rvsvyy4lkwrqu",\n    "data":  "48656c6c6f20576f726c64210a"\n  }\n')))))),(0,t.yg)("h2",{id:"verify-a-file"},"Verify a file"),(0,t.yg)("p",null,"To verify a file only the key name used and the previously signed file are needed."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-text"},"\u279c simd off-chain verify-file alice signedFile.json\nVerification OK!\n")))}g.isMDXComponent=!0}}]);