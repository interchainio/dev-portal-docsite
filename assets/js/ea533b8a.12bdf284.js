"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[15779],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>y});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,y=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(y,i(i({ref:t},u),{},{components:n})):a.createElement(y,i({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},24281:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(58168),r=(n(96540),n(15680));const o={title:"Name Service",sidebar_label:"Testnet",sidebar_position:5,slug:"/build/name-service-testnet"},i="Running your Application",l={unversionedId:"build-your-application/testnet",id:"version-v0.50.x/build-your-application/testnet",title:"Name Service",description:"Congrats!! You built your first network already. You are ready to run a local testnet environment to verify it works.",source:"@site/onboarding_versioned_docs/version-v0.50.x/02-build-your-application/05-testnet.md",sourceDirName:"02-build-your-application",slug:"/build/name-service-testnet",permalink:"/dev-portal-docsite/onboarding/build/name-service-testnet",draft:!1,tags:[],version:"v0.50.x",sidebarPosition:5,frontMatter:{title:"Name Service",sidebar_label:"Testnet",sidebar_position:5,slug:"/build/name-service-testnet"},sidebar:"defaultSidebar",previous:{title:"Configure Client",permalink:"/dev-portal-docsite/onboarding/build/name-service-client"},next:{title:"Bonus",permalink:"/dev-portal-docsite/onboarding/build/name-service-bonus"}},s={},c=[{value:"Launch The Network",id:"launch-the-network",level:3},{value:"Interact Set Name",id:"interact-set-name",level:3},{value:"Interaction Get Name",id:"interaction-get-name",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(p,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"running-your-application"},"Running your Application"),(0,r.yg)("admonition",{title:"Synopsis",type:"note"},(0,r.yg)("p",{parentName:"admonition"},"Congrats!! You built your first network already. You are ready to run a local testnet environment to verify it works."),(0,r.yg)("ul",{parentName:"admonition"},(0,r.yg)("li",{parentName:"ul"},"Building your application executable"),(0,r.yg)("li",{parentName:"ul"},"Running a local testnet"),(0,r.yg)("li",{parentName:"ul"},"Interacting with the network"))),(0,r.yg)("h3",{id:"launch-the-network"},"Launch The Network"),(0,r.yg)("p",null,"Use the ",(0,r.yg)("inlineCode",{parentName:"p"},"sh-testnet")," command ",(0,r.yg)("em",{parentName:"p"},"(short for shell testnet)")," to quickly build your application, generate example wallet accounts, and start the local network on your machine."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"# Run a quick shell testnet\nmake sh-testnet\n")),(0,r.yg)("p",null,"The chain will begin to create (mint) new blocks. You can see the logs of the network running in the terminal."),(0,r.yg)("h3",{id:"interact-set-name"},"Interact Set Name"),(0,r.yg)("p",null,"Using the newly built binary executable ",(0,r.yg)("em",{parentName:"p"},"(rolld from the --bin flag when the chain was created)"),", you are going to execute the ",(0,r.yg)("inlineCode",{parentName:"p"},"set"),' action to your name. In this example, use "alice". This links account ',(0,r.yg)("inlineCode",{parentName:"p"},"acc1")," address to the desired name in the keeper."),(0,r.yg)("p",null,"You can either query or set data in the network using the command executable. If you wish to perform an action you submit a transaction (tx). If you wish to read data  you are querying (q). The next sub command specifies which module will receive the action on. In this case, the ",(0,r.yg)("inlineCode",{parentName:"p"},"nameservice")," module since our module is named nameservice. Then the ",(0,r.yg)("inlineCode",{parentName:"p"},"set")," command is called, which was defined in the autocli.go."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"rolld tx nameservice set alice --from=acc1 --yes\n\n# You can verify this transaction was successful\n# By querying it's unique ID.\nrolld q tx EC3FBF3248E24B5FEB6A5F7F35BBB4634E9C75587119E3FBCF5C1FED05E5A399\n")),(0,r.yg)("h2",{id:"interaction-get-name"},"Interaction Get Name"),(0,r.yg)("p",null,"Now you are going to get the name of a wallet. A nested command ",(0,r.yg)("inlineCode",{parentName:"p"},"$(rolld keys show acc1 -a)")," gets the unique address of the acc1 account added when you started the testnet."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"rolld q nameservice resolve roll1efd63aw40lxf3n4mhf7dzhjkr453axur57cawh --output=json\n\nrolld q nameservice resolve $(rolld keys show acc1 -a) --output=json\n")),(0,r.yg)("p",null,"The expected result should be:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "alice"\n}\n')),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"When you are ready to stop the testnet, you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"ctrl + c")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"killall -9 rolld"),".")),(0,r.yg)("p",null,"Your network is now running and you have successfully set and resolved a name! \ud83c\udf89"))}d.isMDXComponent=!0}}]);