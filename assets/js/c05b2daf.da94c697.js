"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[11332],{15680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>p});var r=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=r.createContext({}),c=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(m.Provider,{value:t},e.children)},v="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,m=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),v=c(n),u=i,p=v["".concat(m,".").concat(u)]||v[u]||g[u]||s;return n?r.createElement(p,a(a({ref:t},l),{},{components:n})):r.createElement(p,a({ref:t},l))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=u;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[v]="string"==typeof e?e:i,a[1]=o;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},80039:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>a,default:()=>g,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(58168),i=(n(96540),n(15680));const s={title:"Migrations",sidebar_label:"Migrations",sidebar_position:9,slug:"/ibc/light-clients/wasm/migrations"},a="Migrations",o={unversionedId:"light-clients/wasm/migrations",id:"version-v8.5.x/light-clients/wasm/migrations",title:"Migrations",description:"This guide provides instructions for migrating 08-wasm versions.",source:"@site/ibc-go_versioned_docs/version-v8.5.x/03-light-clients/04-wasm/09-migrations.md",sourceDirName:"03-light-clients/04-wasm",slug:"/ibc/light-clients/wasm/migrations",permalink:"/dev-portal-docsite/ibc-go/ibc/light-clients/wasm/migrations",draft:!1,tags:[],version:"v8.5.x",sidebarPosition:9,frontMatter:{title:"Migrations",sidebar_label:"Migrations",sidebar_position:9,slug:"/ibc/light-clients/wasm/migrations"},sidebar:"defaultSidebar",previous:{title:"Client",permalink:"/dev-portal-docsite/ibc-go/ibc/light-clients/wasm/client"},next:{title:"Overview",permalink:"/dev-portal-docsite/ibc-go/middleware/ics29-fee/overview"}},m={},c=[{value:"From ibc-go v7.3.x to ibc-go v8.0.x",id:"from-ibc-go-v73x-to-ibc-go-v80x",level:2},{value:"Chains",id:"chains",level:2},{value:"From v0.1.0+ibc-go-v8.0-wasmvm-v1.5 to v0.2.0-ibc-go-v8.3-wasmvm-v2.0",id:"from-v010ibc-go-v80-wasmvm-v15-to-v020-ibc-go-v83-wasmvm-v20",level:2},{value:"Chains",id:"chains-1",level:3}],l={toc:c},v="wrapper";function g(e){let{components:t,...n}=e;return(0,i.yg)(v,(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"migrations"},"Migrations"),(0,i.yg)("p",null,"This guide provides instructions for migrating 08-wasm versions."),(0,i.yg)("h2",{id:"from-ibc-go-v73x-to-ibc-go-v80x"},"From ibc-go v7.3.x to ibc-go v8.0.x"),(0,i.yg)("h2",{id:"chains"},"Chains"),(0,i.yg)("p",null,"In the 08-wasm versions compatible with ibc-go v7.3.x and above from the v7 release line, the checksums of the uploaded Wasm bytecodes are all stored under a single key. From ibc-go v8.0.x the checksums are stored using ",(0,i.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/v0.50/build/packages/collections#keyset"},(0,i.yg)("inlineCode",{parentName:"a"},"collections.KeySet")),", whose full functionality became available in Cosmos SDK v0.50. There is therefore an ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/57fcdb9a9a9db9b206f7df2f955866dc4e10fef4/modules/light-clients/08-wasm/module.go#L115-L118"},"automatic migration handler")," configured in the 08-wasm module to migrate the stored checksums to ",(0,i.yg)("inlineCode",{parentName:"p"},"collections.KeySet"),"."),(0,i.yg)("h2",{id:"from-v010ibc-go-v80-wasmvm-v15-to-v020-ibc-go-v83-wasmvm-v20"},"From v0.1.0+ibc-go-v8.0-wasmvm-v1.5 to v0.2.0-ibc-go-v8.3-wasmvm-v2.0"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"WasmEngine")," interface has been updated to reflect changes in the function signatures of Wasm VM:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"type WasmEngine interface {\n- StoreCode(code wasmvm.WasmCode) (wasmvm.Checksum, error)\n+ StoreCode(code wasmvm.WasmCode, gasLimit uint64) (wasmvmtypes.Checksum, uint64, error)\n\n  StoreCodeUnchecked(code wasmvm.WasmCode) (wasmvm.Checksum, error)\n\n  Instantiate(\n    checksum wasmvm.Checksum,\n    env wasmvmtypes.Env,\n    info wasmvmtypes.MessageInfo,\n    initMsg []byte,\n    store wasmvm.KVStore,\n    goapi wasmvm.GoAPI,\n    querier wasmvm.Querier,\n    gasMeter wasmvm.GasMeter,\n    gasLimit uint64,\n    deserCost wasmvmtypes.UFraction,\n- ) (*wasmvmtypes.Response, uint64, error)\n+ ) (*wasmvmtypes.ContractResult, uint64, error)\n\n  Query(\n    checksum wasmvm.Checksum,\n    env wasmvmtypes.Env,\n    queryMsg []byte,\n    store wasmvm.KVStore,\n    goapi wasmvm.GoAPI,\n    querier wasmvm.Querier,\n    gasMeter wasmvm.GasMeter,\n    gasLimit uint64,\n    deserCost wasmvmtypes.UFraction,\n- ) ([]byte, uint64, error)\n+ ) (*wasmvmtypes.QueryResult, uint64, error)\n\n  Migrate(\n    checksum wasmvm.Checksum,\n    env wasmvmtypes.Env,\n    migrateMsg []byte,\n    store wasmvm.KVStore,\n    goapi wasmvm.GoAPI,\n    querier wasmvm.Querier,\n    gasMeter wasmvm.GasMeter,\n    gasLimit uint64,\n    deserCost wasmvmtypes.UFraction,\n- ) (*wasmvmtypes.Response, uint64, error)\n+ ) (*wasmvmtypes.ContractResult, uint64, error)\n\n  Sudo(\n    checksum wasmvm.Checksum,\n    env wasmvmtypes.Env,\n    sudoMsg []byte,\n    store wasmvm.KVStore,\n    goapi wasmvm.GoAPI,\n    querier wasmvm.Querier,\n    gasMeter wasmvm.GasMeter,\n    gasLimit uint64,\n    deserCost wasmvmtypes.UFraction,\n- ) (*wasmvmtypes.Response, uint64, error)\n+ ) (*wasmvmtypes.ContractResult, uint64, error)\n\n  GetCode(checksum wasmvm.Checksum) (wasmvm.WasmCode, error)\n\n  Pin(checksum wasmvm.Checksum) error\n\n  Unpin(checksum wasmvm.Checksum) error\n}\n")),(0,i.yg)("p",null,"Similar changes were required in the functions of the ",(0,i.yg)("inlineCode",{parentName:"p"},"MockWasmEngine")," interface."),(0,i.yg)("h3",{id:"chains-1"},"Chains"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"SupportedCapabilities")," field of ",(0,i.yg)("inlineCode",{parentName:"p"},"WasmConfig")," is now of type ",(0,i.yg)("inlineCode",{parentName:"p"},"[]string"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"type WasmConfig struct {\n  DataDir string\n- SupportedCapabilities string\n+ SupportedCapabilities []string\n  ContractDebugMode bool\n}\n")))}g.isMDXComponent=!0}}]);