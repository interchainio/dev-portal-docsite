"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[63434],{15680:(e,t,r)=>{r.d(t,{xA:()=>l,yg:()=>y});var n=r(96540);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},l=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,y=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(y,p(p({ref:t},l),{},{components:r})):n.createElement(y,p({ref:t},l))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,p=new Array(a);p[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:o,p[1]=i;for(var s=2;s<a;s++)p[s]=r[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},66860:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(58168),o=(r(96540),r(15680));const a={title:"Keeper",sidebar_label:"Keeper",sidebar_position:4,slug:"/ibc/apps/keeper"},p="Keeper",i={unversionedId:"docs/ibc/apps/keeper",id:"docs/ibc/apps/keeper",title:"Keeper",description:"Learn how to implement the IBC Module keeper.",source:"@site/ibc-go/docs/01-ibc/03-apps/04-keeper.md",sourceDirName:"docs/01-ibc/03-apps",slug:"/ibc/apps/keeper",permalink:"/dev-portal-docsite/ibc-go/next/ibc/apps/keeper",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Keeper",sidebar_label:"Keeper",sidebar_position:4,slug:"/ibc/apps/keeper"},sidebar:"defaultSidebar",previous:{title:"Bind ports",permalink:"/dev-portal-docsite/ibc-go/next/ibc/apps/bindports"},next:{title:"Define packets and acks",permalink:"/dev-portal-docsite/ibc-go/next/ibc/apps/packets_acks"}},c={},s=[],l={toc:s},d="wrapper";function u(e){let{components:t,...r}=e;return(0,o.yg)(d,(0,n.A)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"keeper"},"Keeper"),(0,o.yg)("admonition",{title:"Synopsis",type:"note"},(0,o.yg)("p",{parentName:"admonition"},"Learn how to implement the IBC Module keeper.")),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("h2",{parentName:"admonition",id:"pre-requisite-readings"},"Pre-requisite readings"),(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/dev-portal-docsite/ibc-go/next/ibc/overview"},"IBC Overview")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/dev-portal-docsite/ibc-go/next/ibc/integration"},"IBC default integration")))),(0,o.yg)("p",null,"In the previous sections, on channel handshake callbacks and port binding in ",(0,o.yg)("inlineCode",{parentName:"p"},"InitGenesis"),", a reference was made to keeper methods that need to be implemented when creating a custom IBC module. Below is an overview of how to define an IBC module's keeper."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Note that some code has been left out for clarity, to get a full code overview, please refer to ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/main/modules/apps/transfer/keeper/keeper.go"},"the transfer module's keeper in the ibc-go repo"),".")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},"// Keeper defines the IBC app module keeper\ntype Keeper struct {\n  storeKey   sdk.StoreKey\n  cdc        codec.BinaryCodec\n  paramSpace paramtypes.Subspace\n\n  channelKeeper types.ChannelKeeper\n  portKeeper    types.PortKeeper\n\n  // ... additional according to custom logic\n}\n\n// NewKeeper creates a new IBC app module Keeper instance\nfunc NewKeeper(\n  // args\n) Keeper {\n  // ...\n\n  return Keeper{\n    cdc:           cdc,\n    storeKey:      key,\n    paramSpace:    paramSpace,\n\n    channelKeeper: channelKeeper,\n    portKeeper:    portKeeper,\n    scopedKeeper:  scopedKeeper,\n\n    // ... additional according to custom logic\n  }\n}\n\n// GetPort returns the portID for the IBC app module. Used in ExportGenesis\nfunc (k Keeper) GetPort(ctx sdk.Context) string {\n  store := ctx.KVStore(k.storeKey)\n  return string(store.Get(types.PortKey))\n}\n\n// SetPort sets the portID for the IBC app module. Used in InitGenesis\nfunc (k Keeper) SetPort(ctx sdk.Context, portID string) {\n  store := ctx.KVStore(k.storeKey)\n  store.Set(types.PortKey, []byte(portID))\n}\n\n// ... additional according to custom logic\n")))}u.isMDXComponent=!0}}]);