"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[68881],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>u});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),g=l(t),m=i,u=g["".concat(c,".").concat(m)]||g[m]||d[m]||r;return t?a.createElement(u,s(s({ref:n},p),{},{components:t})):a.createElement(u,s({ref:n},p))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[g]="string"==typeof e?e:i,s[1]=o;for(var l=2;l<r;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1200:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=t(58168),i=(t(96540),t(15680));const r={title:"Messages",sidebar_label:"Messages",sidebar_position:5,slug:"/apps/interchain-accounts/messages"},s="Messages",o={unversionedId:"apps/interchain-accounts/messages",id:"version-v6.3.x/apps/interchain-accounts/messages",title:"Messages",description:"MsgRegisterInterchainAccount",source:"@site/ibc-go_versioned_docs/version-v6.3.x/02-apps/02-interchain-accounts/05-messages.md",sourceDirName:"02-apps/02-interchain-accounts",slug:"/apps/interchain-accounts/messages",permalink:"/dev-portal-docsite/ibc-go/v6.3.x/apps/interchain-accounts/messages",draft:!1,tags:[],version:"v6.3.x",sidebarPosition:5,frontMatter:{title:"Messages",sidebar_label:"Messages",sidebar_position:5,slug:"/apps/interchain-accounts/messages"},sidebar:"defaultSidebar",previous:{title:"Integration",permalink:"/dev-portal-docsite/ibc-go/v6.3.x/apps/interchain-accounts/integration"},next:{title:"Parameters",permalink:"/dev-portal-docsite/ibc-go/v6.3.x/apps/interchain-accounts/parameters"}},c={},l=[{value:"<code>MsgRegisterInterchainAccount</code>",id:"msgregisterinterchainaccount",level:2},{value:"<code>MsgSendTx</code>",id:"msgsendtx",level:2},{value:"Atomicity",id:"atomicity",level:2}],p={toc:l},g="wrapper";function d(e){let{components:n,...t}=e;return(0,i.yg)(g,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"messages"},"Messages"),(0,i.yg)("h2",{id:"msgregisterinterchainaccount"},(0,i.yg)("inlineCode",{parentName:"h2"},"MsgRegisterInterchainAccount")),(0,i.yg)("p",null,"An Interchain Accounts channel handshake can be initiated using ",(0,i.yg)("inlineCode",{parentName:"p"},"MsgRegisterInterchainAccount"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"type MsgRegisterInterchainAccount struct {\n  Owner        string\n  ConnectionID string\n  Version      string\n}\n")),(0,i.yg)("p",null,"This message is expected to fail if:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Owner")," is an empty string."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ConnectionID")," is invalid (see ",(0,i.yg)("a",{parentName:"li",href:"https://github.com/cosmos/ibc/blob/master/spec/core/ics-024-host-requirements/README.md#paths-identifiers-separators"},"24-host naming requirements"),").")),(0,i.yg)("p",null,"This message will construct a new ",(0,i.yg)("inlineCode",{parentName:"p"},"MsgChannelOpenInit")," on chain and route it to the core IBC message server to initiate the opening step of the channel handshake."),(0,i.yg)("p",null,"The controller submodule will generate a new port identifier and claim the associated port capability. The caller is expected to provide an appropriate application version string. For example, this may be an ICS-27 JSON encoded ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v6.0.0-rc0/proto/ibc/applications/interchain_accounts/v1/metadata.proto#L11"},(0,i.yg)("inlineCode",{parentName:"a"},"Metadata"))," type or an ICS-29 JSON encoded ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v6.0.0-rc0/proto/ibc/applications/fee/v1/metadata.proto#L11"},(0,i.yg)("inlineCode",{parentName:"a"},"Metadata"))," type with a nested application version.\nIf the ",(0,i.yg)("inlineCode",{parentName:"p"},"Version")," string is omitted, the controller submodule will construct a default version string in the ",(0,i.yg)("inlineCode",{parentName:"p"},"OnChanOpenInit")," handshake callback."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"type MsgRegisterInterchainAccountResponse struct {\n  ChannelID string\n}\n")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"ChannelID")," is returned in the message response."),(0,i.yg)("h2",{id:"msgsendtx"},(0,i.yg)("inlineCode",{parentName:"h2"},"MsgSendTx")),(0,i.yg)("p",null,"An Interchain Accounts transaction can be executed on a remote host chain by sending a ",(0,i.yg)("inlineCode",{parentName:"p"},"MsgSendTx")," from the corresponding controller chain:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"type MsgSendTx struct {\n  Owner           string\n  ConnectionID    string\n  PacketData      InterchainAccountPacketData \n  RelativeTimeout uint64\n}\n")),(0,i.yg)("p",null,"This message is expected to fail if:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Owner")," is an empty string."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ConnectionID")," is invalid (see ",(0,i.yg)("a",{parentName:"li",href:"https://github.com/cosmos/ibc/blob/master/spec/core/ics-024-host-requirements/README.md#paths-identifiers-separators"},"24-host naming requirements"),")."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"PacketData")," contains an ",(0,i.yg)("inlineCode",{parentName:"li"},"UNSPECIFIED")," type enum, the length of ",(0,i.yg)("inlineCode",{parentName:"li"},"Data")," bytes is zero or the ",(0,i.yg)("inlineCode",{parentName:"li"},"Memo")," field exceeds 256 characters in length."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"RelativeTimeout")," is zero.")),(0,i.yg)("p",null,"This message will create a new IBC packet with the provided ",(0,i.yg)("inlineCode",{parentName:"p"},"PacketData")," and send it via the channel associated with the ",(0,i.yg)("inlineCode",{parentName:"p"},"Owner")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"ConnectionID"),".\nThe ",(0,i.yg)("inlineCode",{parentName:"p"},"PacketData")," is expected to contain a list of serialized ",(0,i.yg)("inlineCode",{parentName:"p"},"[]sdk.Msg")," in the form of ",(0,i.yg)("inlineCode",{parentName:"p"},"CosmosTx"),". Please note the signer field of each ",(0,i.yg)("inlineCode",{parentName:"p"},"sdk.Msg")," must be the interchain account address.\nWhen the packet is relayed to the host chain, the ",(0,i.yg)("inlineCode",{parentName:"p"},"PacketData")," is unmarshalled and the messages are authenticated and executed."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"type MsgSendTxResponse struct {\n  Sequence uint64\n}\n")),(0,i.yg)("p",null,"The packet ",(0,i.yg)("inlineCode",{parentName:"p"},"Sequence")," is returned in the message response."),(0,i.yg)("h2",{id:"atomicity"},"Atomicity"),(0,i.yg)("p",null,"As the Interchain Accounts module supports the execution of multiple transactions using the Cosmos SDK ",(0,i.yg)("inlineCode",{parentName:"p"},"Msg")," interface, it provides the same atomicity guarantees as Cosmos SDK-based applications, leveraging the ",(0,i.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/learn/advanced/store#cachemultistore"},(0,i.yg)("inlineCode",{parentName:"a"},"CacheMultiStore"))," architecture provided by the ",(0,i.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/learn/advanced/context.html"},(0,i.yg)("inlineCode",{parentName:"a"},"Context"))," type. "),(0,i.yg)("p",null,"This provides atomic execution of transactions when using Interchain Accounts, where state changes are only committed if all ",(0,i.yg)("inlineCode",{parentName:"p"},"Msg"),"s succeed."))}d.isMDXComponent=!0}}]);