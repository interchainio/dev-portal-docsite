"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[49179],{15680:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>y});var n=t(96540);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=n.createContext({}),u=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},c=function(e){var r=u(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=i,y=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return t?n.createElement(y,a(a({ref:r},c),{},{components:t})):n.createElement(y,a({ref:r},c))}));function y(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=t[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},62538:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=t(58168),i=(t(96540),t(15680));const o={sidebar_position:1},a="Query Services",s={unversionedId:"docs/build/building-modules/query-services",id:"docs/build/building-modules/query-services",title:"Query Services",description:"A Protobuf Query service processes queries. Query services are specific to the module in which they are defined, and only process queries defined within said module.",source:"@site/cosmos-sdk/docs/build/building-modules/04-query-services.md",sourceDirName:"docs/build/building-modules",slug:"/docs/build/building-modules/query-services",permalink:"/dev-portal-docsite/cosmos-sdk/next/docs/build/building-modules/query-services",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"buildSidebar",previous:{title:"Msg Services",permalink:"/dev-portal-docsite/cosmos-sdk/next/docs/build/building-modules/msg-services"},next:{title:"Protocol buffer Annotations",permalink:"/dev-portal-docsite/cosmos-sdk/next/docs/build/building-modules/protobuf-annotations"}},l={},u=[{value:"Implementation of a module query service",id:"implementation-of-a-module-query-service",level:2},{value:"gRPC Service",id:"grpc-service",level:3},{value:"Calling queries from the State Machine",id:"calling-queries-from-the-state-machine",level:3}],c={toc:u},d="wrapper";function p(e){let{components:r,...t}=e;return(0,i.yg)(d,(0,n.A)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"query-services"},"Query Services"),(0,i.yg)("admonition",{title:"Synopsis",type:"note"},(0,i.yg)("p",{parentName:"admonition"},"A Protobuf Query service processes ",(0,i.yg)("a",{parentName:"p",href:"/dev-portal-docsite/cosmos-sdk/next/docs/build/building-modules/messages-and-queries#queries"},(0,i.yg)("inlineCode",{parentName:"a"},"queries")),". Query services are specific to the module in which they are defined, and only process ",(0,i.yg)("inlineCode",{parentName:"p"},"queries")," defined within said module.")),(0,i.yg)("admonition",{title:"Pre-requisite Readings",type:"note"},(0,i.yg)("ul",{parentName:"admonition"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/dev-portal-docsite/cosmos-sdk/next/docs/build/building-modules/module-manager"},"Module Manager")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/dev-portal-docsite/cosmos-sdk/next/docs/build/building-modules/messages-and-queries"},"Messages and Queries")))),(0,i.yg)("h2",{id:"implementation-of-a-module-query-service"},"Implementation of a module query service"),(0,i.yg)("h3",{id:"grpc-service"},"gRPC Service"),(0,i.yg)("p",null,"When defining a Protobuf ",(0,i.yg)("inlineCode",{parentName:"p"},"Query")," service, a ",(0,i.yg)("inlineCode",{parentName:"p"},"QueryServer")," interface is generated for each module with all the service methods:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"type QueryServer interface {\n    QueryBalance(context.Context, *QueryBalanceParams) (*types.Coin, error)\n    QueryAllBalances(context.Context, *QueryAllBalancesParams) (*QueryAllBalancesResponse, error)\n}\n")),(0,i.yg)("p",null,"These custom queries methods should be implemented by a module's keeper, typically in ",(0,i.yg)("inlineCode",{parentName:"p"},"./keeper/grpc_query.go"),"."),(0,i.yg)("p",null,"Here's an example implementation for the bank module:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.52.0-beta.2/x/bank/keeper/grpc_query.go#L20-L48\n")),(0,i.yg)("h3",{id:"calling-queries-from-the-state-machine"},"Calling queries from the State Machine"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"cosmos.query.v1.module_query_safe")," protobuf annotation is used to state that a query that is safe to be called from within the state machine, for example:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"a Keeper's query function can be called from another module's Keeper,"),(0,i.yg)("li",{parentName:"ul"},"ADR-033 intermodule query calls,"),(0,i.yg)("li",{parentName:"ul"},"CosmWasm contracts can also directly interact with these queries.")),(0,i.yg)("p",null,"If the ",(0,i.yg)("inlineCode",{parentName:"p"},"module_query_safe")," annotation set to ",(0,i.yg)("inlineCode",{parentName:"p"},"true"),", it means:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"The query is deterministic: given a block height it will return the same response upon multiple calls, and doesn't introduce any state-machine breaking changes across SDK patch versions."),(0,i.yg)("li",{parentName:"ul"},"Gas consumption never fluctuates across calls and across patch versions.")),(0,i.yg)("p",null,"If you are a module developer and want to use ",(0,i.yg)("inlineCode",{parentName:"p"},"module_query_safe")," annotation for your own query, you have to ensure the following things:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"the query is deterministic and won't introduce state-machine-breaking changes without coordinated upgrades"),(0,i.yg)("li",{parentName:"ul"},"it has its gas tracked, to avoid the attack vector where no gas is accounted for on potentially high-computation queries.")))}p.isMDXComponent=!0}}]);