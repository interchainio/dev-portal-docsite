"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[76452],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>u});var s=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,o=function(e,t){if(null==e)return{};var n,s,o={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},g=s.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),g=o,u=m["".concat(l,".").concat(g)]||m[g]||d[g]||a;return n?s.createElement(u,r(r({ref:t},c),{},{components:n})):s.createElement(u,r({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:o,r[1]=i;for(var p=2;p<a;p++)r[p]=n[p];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}g.displayName="MDXCreateElement"},84102:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var s=n(58168),o=(n(96540),n(15680));const a={sidebar_position:1},r="Testing",i={unversionedId:"docs/build/building-modules/testing",id:"docs/build/building-modules/testing",title:"Testing",description:"The Cosmos SDK contains different types of tests.",source:"@site/cosmos-sdk/docs/build/building-modules/16-testing.md",sourceDirName:"docs/build/building-modules",slug:"/docs/build/building-modules/testing",permalink:"/dev-portal-docsite/cosmos-sdk/next/docs/build/building-modules/testing",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"buildSidebar",previous:{title:"Modules depinject-ready",permalink:"/dev-portal-docsite/cosmos-sdk/next/docs/build/building-modules/depinject"},next:{title:"PreBlocker",permalink:"/dev-portal-docsite/cosmos-sdk/next/docs/build/building-modules/preblock"}},l={},p=[{value:"Unit Tests",id:"unit-tests",level:2},{value:"Example",id:"example",level:3},{value:"Integration Tests",id:"integration-tests",level:2},{value:"Example",id:"example-1",level:3},{value:"Deterministic and Regression tests",id:"deterministic-and-regression-tests",level:2},{value:"Simulations",id:"simulations",level:2},{value:"System Tests",id:"system-tests",level:2},{value:"Learn More",id:"learn-more",level:2}],c={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,o.yg)(m,(0,s.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"testing"},"Testing"),(0,o.yg)("p",null,"The Cosmos SDK contains different types of ",(0,o.yg)("a",{parentName:"p",href:"https://martinfowler.com/articles/practical-test-pyramid.html"},"tests"),".\nThese tests have different goals and are used at different stages of the development cycle.\nWe advice, as a general rule, to use tests at all stages of the development cycle.\nIt is advised, as a chain developer, to test your application and modules in a similar way than the SDK."),(0,o.yg)("p",null,"The rationale behind testing can be found in ",(0,o.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/build/architecture/adr-059-test-scopes.html"},"ADR-59"),"."),(0,o.yg)("h2",{id:"unit-tests"},"Unit Tests"),(0,o.yg)("p",null,"Unit tests are the lowest test category of the ",(0,o.yg)("a",{parentName:"p",href:"https://martinfowler.com/articles/practical-test-pyramid.html"},"test pyramid"),".\nAll packages and modules should have unit test coverage. Modules should have their dependencies mocked: this means mocking keepers."),(0,o.yg)("p",null,"The SDK uses ",(0,o.yg)("inlineCode",{parentName:"p"},"mockgen")," to generate mocks for keepers:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/scripts/mockgen.sh#L3-L6\n")),(0,o.yg)("p",null,"You can read more about mockgen ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/golang/mock"},"here"),"."),(0,o.yg)("h3",{id:"example"},"Example"),(0,o.yg)("p",null,"As an example, we will walkthrough the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/gov/keeper/keeper_test.go"},"keeper tests")," of the ",(0,o.yg)("inlineCode",{parentName:"p"},"x/gov")," module."),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"x/gov")," module has a ",(0,o.yg)("inlineCode",{parentName:"p"},"Keeper")," type, which requires a few external dependencies (ie. imports outside ",(0,o.yg)("inlineCode",{parentName:"p"},"x/gov")," to work properly)."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/gov/keeper/keeper.go#L22-L24\n")),(0,o.yg)("p",null,"In order to only test ",(0,o.yg)("inlineCode",{parentName:"p"},"x/gov"),", we mock the ",(0,o.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/v0.46/building-modules/keeper.html#type-definition"},"expected keepers")," and instantiate the ",(0,o.yg)("inlineCode",{parentName:"p"},"Keeper")," with the mocked dependencies. Note that we may need to configure the mocked dependencies to return the expected values:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/gov/keeper/common_test.go#L67-L81\n")),(0,o.yg)("p",null,"This allows us to test the ",(0,o.yg)("inlineCode",{parentName:"p"},"x/gov")," module without having to import other modules."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/gov/keeper/keeper_test.go#L3-L42\n")),(0,o.yg)("p",null,"We can test then create unit tests using the newly created ",(0,o.yg)("inlineCode",{parentName:"p"},"Keeper")," instance."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/gov/keeper/keeper_test.go#L83-L107\n")),(0,o.yg)("h2",{id:"integration-tests"},"Integration Tests"),(0,o.yg)("p",null,"Integration tests are at the second level of the ",(0,o.yg)("a",{parentName:"p",href:"https://martinfowler.com/articles/practical-test-pyramid.html"},"test pyramid"),".\nIn the SDK, we locate our integration tests under ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/tree/main/tests/integration"},(0,o.yg)("inlineCode",{parentName:"a"},"/tests/integrations")),"."),(0,o.yg)("p",null,"The goal of these integration tests is to test how a component interacts with other dependencies. Compared to unit tests, integration tests do not mock dependencies. Instead, they use the direct dependencies of the component. This differs as well from end-to-end tests, which test the component with a full application."),(0,o.yg)("p",null,"Integration tests interact with the tested module via the defined ",(0,o.yg)("inlineCode",{parentName:"p"},"Msg")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"Query")," services. The result of the test can be verified by checking the state of the application, by checking the emitted events or the response. It is advised to combine two of these methods to verify the result of the test."),(0,o.yg)("p",null,"The SDK provides small helpers for quickly setting up an integration tests. These helpers can be found at ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/testutil"},"https://github.com/cosmos/cosmos-sdk/blob/main/testutil"),"."),(0,o.yg)("h3",{id:"example-1"},"Example"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/a2f73a7dd37bea0ab303792c55fa1e4e1db3b898/testutil/integration/example_test.go#L30-L116\n")),(0,o.yg)("h2",{id:"deterministic-and-regression-tests"},"Deterministic and Regression tests"),(0,o.yg)("p",null,"Tests are written for queries in the Cosmos SDK which have ",(0,o.yg)("inlineCode",{parentName:"p"},"module_query_safe")," Protobuf annotation."),(0,o.yg)("p",null,"Each query is tested using 2 methods:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Use property-based testing with the ",(0,o.yg)("a",{parentName:"li",href:"https://pkg.go.dev/pgregory.net/rapid@v0.5.3"},(0,o.yg)("inlineCode",{parentName:"a"},"rapid"))," library. The property that is tested is that the query response and gas consumption are the same upon 1000 query calls."),(0,o.yg)("li",{parentName:"ul"},"Regression tests are written with hardcoded responses and gas, and verify they don't change upon 1000 calls and between SDK patch versions.")),(0,o.yg)("p",null,"Here's an example of regression tests:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/tests/integration/bank/keeper/deterministic_test.go#L134-L151\n")),(0,o.yg)("h2",{id:"simulations"},"Simulations"),(0,o.yg)("p",null,"Simulations fuzz tests for deterministic message execution. They use a minimal application, built with ",(0,o.yg)("a",{parentName:"p",href:"/dev-portal-docsite/cosmos-sdk/next/docs/build/packages/depinject"},(0,o.yg)("inlineCode",{parentName:"a"},"depinject")),":"),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"Simulations have been refactored to message factories")),(0,o.yg)("p",null,"An example for ",(0,o.yg)("inlineCode",{parentName:"p"},"x/bank/")," simulations:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/release/v0.52.x/x/bank/simulation/msg_factory.go#L13-L20\n")),(0,o.yg)("h2",{id:"system-tests"},"System Tests"),(0,o.yg)("p",null,"System tests are at the top of the ",(0,o.yg)("a",{parentName:"p",href:"https://martinfowler.com/articles/practical-test-pyramid.html"},"test pyramid"),".\nThey test the whole application flow as black box, from the user perspective. They are located under ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/tree/main/tests/systemtests"},(0,o.yg)("inlineCode",{parentName:"a"},"/tests/systemtests")),"."),(0,o.yg)("p",null,"For that, the SDK is using the ",(0,o.yg)("inlineCode",{parentName:"p"},"simapp")," binary, but you should use your own binary.\nMore details about system test can be found in ",(0,o.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/build/building-apps/system-tests"},"building-apps")),(0,o.yg)("h2",{id:"learn-more"},"Learn More"),(0,o.yg)("p",null,"Learn more about testing scope in ",(0,o.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/build/architecture/adr-059-test-scopes.html"},"ADR-59"),"."))}d.isMDXComponent=!0}}]);