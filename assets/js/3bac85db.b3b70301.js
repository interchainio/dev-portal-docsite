"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[66227],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>m});var i=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=s(n),g=r,m=p["".concat(c,".").concat(g)]||p[g]||u[g]||l;return n?i.createElement(m,a(a({ref:t},d),{},{components:n})):i.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=g;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:r,a[1]=o;for(var s=2;s<l;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},20340:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var i=n(58168),r=(n(96540),n(15680));const l={title:"Client State interface",sidebar_label:"Client State interface",sidebar_position:3,slug:"/ibc/light-clients/client-state"},a="Implementing the ClientState interface",o={unversionedId:"docs/light-clients/developer-guide/client-state",id:"docs/light-clients/developer-guide/client-state",title:"Client State interface",description:"Learn how to implement the ClientState interface.",source:"@site/ibc-go/docs/03-light-clients/01-developer-guide/03-client-state.md",sourceDirName:"docs/03-light-clients/01-developer-guide",slug:"/ibc/light-clients/client-state",permalink:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/client-state",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Client State interface",sidebar_label:"Client State interface",sidebar_position:3,slug:"/ibc/light-clients/client-state"},sidebar:"defaultSidebar",previous:{title:"Light Client Module interface",permalink:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/light-client-module"},next:{title:"Consensus State interface",permalink:"/dev-portal-docsite/ibc-go/next/ibc/light-clients/consensus-state"}},c={},s=[{value:"<code>ClientType</code> method",id:"clienttype-method",level:2},{value:"<code>Validate</code> method",id:"validate-method",level:2}],d={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.yg)(p,(0,i.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"implementing-the-clientstate-interface"},"Implementing the ",(0,r.yg)("inlineCode",{parentName:"h1"},"ClientState")," interface"),(0,r.yg)("p",null,"Learn how to implement the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v7.0.0/modules/core/exported/client.go#L36"},(0,r.yg)("inlineCode",{parentName:"a"},"ClientState"))," interface."),(0,r.yg)("h2",{id:"clienttype-method"},(0,r.yg)("inlineCode",{parentName:"h2"},"ClientType")," method"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"ClientType")," should return a unique string identifier of the light client. This will be used when generating a client identifier.\nThe format is created as follows: ",(0,r.yg)("inlineCode",{parentName:"p"},"{client-type}-{N}")," where ",(0,r.yg)("inlineCode",{parentName:"p"},"{N}")," is the unique global nonce associated with a specific client (e.g ",(0,r.yg)("inlineCode",{parentName:"p"},"07-tendermint-0"),")."),(0,r.yg)("h2",{id:"validate-method"},(0,r.yg)("inlineCode",{parentName:"h2"},"Validate")," method"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Validate")," should validate every client state field and should return an error if any value is invalid. The light client\nimplementer is in charge of determining which checks are required. See the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-go/blob/v7.0.0/modules/light-clients/07-tendermint/client_state.go#L111"},"Tendermint light client implementation")," as a reference."))}u.isMDXComponent=!0}}]);