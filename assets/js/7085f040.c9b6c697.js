"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[57145],{15680:(e,o,n)=>{n.d(o,{xA:()=>m,yg:()=>y});var t=n(96540);function a(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function r(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?r(Object(n),!0).forEach((function(o){a(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function l(e,o){if(null==e)return{};var n,t,a=function(e,o){if(null==e)return{};var n,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],o.indexOf(n)>=0||(a[n]=e[n]);return a}(e,o);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=t.createContext({}),s=function(e){var o=t.useContext(p),n=o;return e&&(n="function"==typeof e?e(o):i(i({},o),e)),n},m=function(e){var o=s(e.components);return t.createElement(p.Provider,{value:o},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},u=t.forwardRef((function(e,o){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,y=d["".concat(p,".").concat(u)]||d[u]||c[u]||r;return n?t.createElement(y,i(i({ref:o},m),{},{components:n})):t.createElement(y,i({ref:o},m))}));function y(e,o){var n=arguments,a=o&&o.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var p in o)hasOwnProperty.call(o,p)&&(l[p]=o[p]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},23640:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var t=n(58168),a=(n(96540),n(15680));const r={sidebar_position:1},i="Application Mempool",l={unversionedId:"build/building-apps/app-mempool",id:"version-0.52/build/building-apps/app-mempool",title:"Application Mempool",description:"This sections describes how the app-side mempool can be used and replaced.",source:"@site/cosmos-sdk_versioned_docs/version-0.52/build/building-apps/02-app-mempool.md",sourceDirName:"build/building-apps",slug:"/build/building-apps/app-mempool",permalink:"/dev-portal-docsite/cosmos-sdk/build/building-apps/app-mempool",draft:!1,tags:[],version:"0.52",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"buildSidebar",previous:{title:"Overview of app_di.go",permalink:"/dev-portal-docsite/cosmos-sdk/build/building-apps/app-go-v2"},next:{title:"Application Upgrade",permalink:"/dev-portal-docsite/cosmos-sdk/build/building-apps/app-upgrade"}},p={},s=[{value:"Mempool",id:"mempool",level:2},{value:"No-op Mempool",id:"no-op-mempool",level:3},{value:"Sender Nonce Mempool",id:"sender-nonce-mempool",level:3},{value:"MaxTxs",id:"maxtxs",level:4},{value:"Seed",id:"seed",level:4},{value:"Priority Nonce Mempool",id:"priority-nonce-mempool",level:3},{value:"MaxTxs",id:"maxtxs-1",level:4},{value:"Callback",id:"callback",level:4}],m={toc:s},d="wrapper";function c(e){let{components:o,...n}=e;return(0,a.yg)(d,(0,t.A)({},m,n,{components:o,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"application-mempool"},"Application Mempool"),(0,a.yg)("admonition",{title:"Synopsis",type:"note"},(0,a.yg)("p",{parentName:"admonition"},"This sections describes how the app-side mempool can be used and replaced. ")),(0,a.yg)("p",null,"Since ",(0,a.yg)("inlineCode",{parentName:"p"},"v0.47")," the application has its own mempool to allow much more granular\nblock building than previous versions. This change was enabled by\n",(0,a.yg)("a",{parentName:"p",href:"https://docs.cometbft.com/v0.37/spec/abci/"},"ABCI 1.0"),".\nNotably it introduces the ",(0,a.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," steps of ABCI++. For more information please see ",(0,a.yg)("a",{parentName:"p",href:"/dev-portal-docsite/cosmos-sdk/build/abci/introduction"},"here")),(0,a.yg)("admonition",{title:"Pre-requisite Readings",type:"note"},(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/dev-portal-docsite/cosmos-sdk/learn/advanced/baseapp"},"BaseApp")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/dev-portal-docsite/cosmos-sdk/build/abci/introduction"},"Abci")))),(0,a.yg)("h2",{id:"mempool"},"Mempool"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Before we delve into ",(0,a.yg)("inlineCode",{parentName:"li"},"PrepareProposal")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"ProcessProposal"),", let's first walk through the mempool concepts.")),(0,a.yg)("p",null,"There are countless designs that an application developer can write for a mempool, the SDK opted to provide only simple mempool implementations.\nNamely, the SDK provides the following mempools:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#no-op-mempool"},"No-op Mempool")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#sender-nonce-mempool"},"Sender Nonce Mempool")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#priority-nonce-mempool"},"Priority Nonce Mempool"))),(0,a.yg)("p",null,"The default SDK is a ",(0,a.yg)("a",{parentName:"p",href:"#no-op-mempool"},"No-op Mempool"),", but it can be replaced by the application developer in ",(0,a.yg)("a",{parentName:"p",href:"/dev-portal-docsite/cosmos-sdk/build/building-apps/app-go-v2"},(0,a.yg)("inlineCode",{parentName:"a"},"app.go")),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},"nonceMempool := mempool.NewSenderNonceMempool()\nmempoolOpt   := baseapp.SetMempool(nonceMempool)\nbaseAppOptions = append(baseAppOptions, mempoolOpt)\n")),(0,a.yg)("h3",{id:"no-op-mempool"},"No-op Mempool"),(0,a.yg)("p",null,"A no-op mempool is a mempool where transactions are completely discarded and ignored when BaseApp interacts with the mempool.\nWhen this mempool is used, it is assumed that an application will rely on CometBFT's transaction ordering defined in ",(0,a.yg)("inlineCode",{parentName:"p"},"RequestPrepareProposal"),",\nwhich is FIFO-ordered by default."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Note: If a NoOp mempool is used, PrepareProposal and ProcessProposal both should be aware of this as\nPrepareProposal could include transactions that could fail verification in ProcessProposal.")),(0,a.yg)("h3",{id:"sender-nonce-mempool"},"Sender Nonce Mempool"),(0,a.yg)("p",null,"The nonce mempool is a mempool that keeps transactions from an sorted by nonce in order to avoid the issues with nonces.\nIt works by storing the transaction in a list sorted by the transaction nonce. When the proposer asks for transactions to be included in a block it randomly selects a sender and gets the first transaction in the list. It repeats this until the mempool is empty or the block is full. "),(0,a.yg)("p",null,"It is configurable with the following parameters:"),(0,a.yg)("h4",{id:"maxtxs"},"MaxTxs"),(0,a.yg)("p",null,"It is an integer value that sets the mempool in one of three modes, ",(0,a.yg)("em",{parentName:"p"},"bounded"),", ",(0,a.yg)("em",{parentName:"p"},"unbounded"),", or ",(0,a.yg)("em",{parentName:"p"},"disabled"),"."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"negative"),": Disabled, mempool does not insert new transaction and return early."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"zero"),": Unbounded mempool has no transaction limit and will never fail with ",(0,a.yg)("inlineCode",{parentName:"li"},"ErrMempoolTxMaxCapacity"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"positive"),": Bounded, it fails with ",(0,a.yg)("inlineCode",{parentName:"li"},"ErrMempoolTxMaxCapacity")," when ",(0,a.yg)("inlineCode",{parentName:"li"},"maxTx")," value is the same as ",(0,a.yg)("inlineCode",{parentName:"li"},"CountTx()"))),(0,a.yg)("h4",{id:"seed"},"Seed"),(0,a.yg)("p",null,"Set the seed for the random number generator used to select transactions from the mempool."),(0,a.yg)("h3",{id:"priority-nonce-mempool"},"Priority Nonce Mempool"),(0,a.yg)("p",null,"The ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/types/mempool/priority_nonce_spec.md"},"priority nonce mempool")," is a mempool implementation that stores txs in a partially ordered set by 2 dimensions:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"priority"),(0,a.yg)("li",{parentName:"ul"},"sender-nonce (sequence number)")),(0,a.yg)("p",null,"Internally it uses one priority ordered ",(0,a.yg)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/huandu/skiplist"},"skip list")," and one skip list per sender ordered by sender-nonce (sequence number). When there are multiple txs from the same sender, they are not always comparable by priority to other sender txs and must be partially ordered by both sender-nonce and priority."),(0,a.yg)("p",null,"It is configurable with the following parameters:"),(0,a.yg)("h4",{id:"maxtxs-1"},"MaxTxs"),(0,a.yg)("p",null,"It is an integer value that sets the mempool in one of three modes, ",(0,a.yg)("em",{parentName:"p"},"bounded"),", ",(0,a.yg)("em",{parentName:"p"},"unbounded"),", or ",(0,a.yg)("em",{parentName:"p"},"disabled"),"."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"negative"),": Disabled, mempool does not insert new transaction and return early."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"zero"),": Unbounded mempool has no transaction limit and will never fail with ",(0,a.yg)("inlineCode",{parentName:"li"},"ErrMempoolTxMaxCapacity"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"positive"),": Bounded, it fails with ",(0,a.yg)("inlineCode",{parentName:"li"},"ErrMempoolTxMaxCapacity")," when ",(0,a.yg)("inlineCode",{parentName:"li"},"maxTx")," value is the same as ",(0,a.yg)("inlineCode",{parentName:"li"},"CountTx()"))),(0,a.yg)("h4",{id:"callback"},"Callback"),(0,a.yg)("p",null,"The priority nonce mempool provides mempool options allowing the application sets callback(s)."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"OnRead"),": Set a callback to be called when a transaction is read from the mempool."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"TxReplacement"),": Sets a callback to be called when duplicated transaction nonce detected during mempool insert. Application can define a transaction replacement rule based on tx priority or certain transaction fields.")),(0,a.yg)("p",null,"More information on the SDK mempool implementation can be found in the ",(0,a.yg)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/cosmos/cosmos-sdk/types/mempool"},"godocs"),"."))}c.isMDXComponent=!0}}]);